ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"PWM.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PWM_Enable,"ax",%progbits
  20              		.align	2
  21              		.global	PWM_Enable
  22              		.thumb
  23              		.thumb_func
  24              		.type	PWM_Enable, %function
  25              	PWM_Enable:
  26              	.LFB2:
  27              		.file 1 "Generated_Source\\PSoC5\\PWM.c"
   1:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/PWM.c **** * File Name: PWM.c
   3:Generated_Source\PSoC5/PWM.c **** * Version 3.30
   4:Generated_Source\PSoC5/PWM.c **** *
   5:Generated_Source\PSoC5/PWM.c **** * Description:
   6:Generated_Source\PSoC5/PWM.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:Generated_Source\PSoC5/PWM.c **** *  comparitors. Each instance of this user module is capable of generating
   8:Generated_Source\PSoC5/PWM.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:Generated_Source\PSoC5/PWM.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:Generated_Source\PSoC5/PWM.c **** *  The compare value output may be configured to be active when the present
  11:Generated_Source\PSoC5/PWM.c **** *  counter is less than or less than/equal to the compare value.
  12:Generated_Source\PSoC5/PWM.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:Generated_Source\PSoC5/PWM.c **** *  width wide when the counter is equal to zero.
  14:Generated_Source\PSoC5/PWM.c **** *
  15:Generated_Source\PSoC5/PWM.c **** * Note:
  16:Generated_Source\PSoC5/PWM.c **** *
  17:Generated_Source\PSoC5/PWM.c **** *******************************************************************************
  18:Generated_Source\PSoC5/PWM.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:Generated_Source\PSoC5/PWM.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:Generated_Source\PSoC5/PWM.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:Generated_Source\PSoC5/PWM.c **** * the software package with which this file was provided.
  22:Generated_Source\PSoC5/PWM.c **** ********************************************************************************/
  23:Generated_Source\PSoC5/PWM.c **** 
  24:Generated_Source\PSoC5/PWM.c **** #include "PWM.h"
  25:Generated_Source\PSoC5/PWM.c **** 
  26:Generated_Source\PSoC5/PWM.c **** /* Error message for removed <resource> through optimization */
  27:Generated_Source\PSoC5/PWM.c **** #ifdef PWM_PWMUDB_genblk1_ctrlreg__REMOVED
  28:Generated_Source\PSoC5/PWM.c ****     #error PWM_v3_30 detected with a constant 0 for the enable or \
  29:Generated_Source\PSoC5/PWM.c ****          constant 1 for reset. This will prevent the component from operating.
  30:Generated_Source\PSoC5/PWM.c **** #endif /* PWM_PWMUDB_genblk1_ctrlreg__REMOVED */
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 2


  31:Generated_Source\PSoC5/PWM.c **** 
  32:Generated_Source\PSoC5/PWM.c **** uint8 PWM_initVar = 0u;
  33:Generated_Source\PSoC5/PWM.c **** 
  34:Generated_Source\PSoC5/PWM.c **** 
  35:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
  36:Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_Start
  37:Generated_Source\PSoC5/PWM.c **** ********************************************************************************
  38:Generated_Source\PSoC5/PWM.c **** *
  39:Generated_Source\PSoC5/PWM.c **** * Summary:
  40:Generated_Source\PSoC5/PWM.c **** *  The start function initializes the pwm with the default values, the
  41:Generated_Source\PSoC5/PWM.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:Generated_Source\PSoC5/PWM.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:Generated_Source\PSoC5/PWM.c **** *
  44:Generated_Source\PSoC5/PWM.c **** * Parameters:
  45:Generated_Source\PSoC5/PWM.c **** *  None
  46:Generated_Source\PSoC5/PWM.c **** *
  47:Generated_Source\PSoC5/PWM.c **** * Return:
  48:Generated_Source\PSoC5/PWM.c **** *  None
  49:Generated_Source\PSoC5/PWM.c **** *
  50:Generated_Source\PSoC5/PWM.c **** * Global variables:
  51:Generated_Source\PSoC5/PWM.c **** *  PWM_initVar: Is modified when this function is called for the
  52:Generated_Source\PSoC5/PWM.c **** *   first time. Is used to ensure that initialization happens only once.
  53:Generated_Source\PSoC5/PWM.c **** *
  54:Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
  55:Generated_Source\PSoC5/PWM.c **** void PWM_Start(void) 
  56:Generated_Source\PSoC5/PWM.c **** {
  57:Generated_Source\PSoC5/PWM.c ****     /* If not Initialized then initialize all required hardware and software */
  58:Generated_Source\PSoC5/PWM.c ****     if(PWM_initVar == 0u)
  59:Generated_Source\PSoC5/PWM.c ****     {
  60:Generated_Source\PSoC5/PWM.c ****         PWM_Init();
  61:Generated_Source\PSoC5/PWM.c ****         PWM_initVar = 1u;
  62:Generated_Source\PSoC5/PWM.c ****     }
  63:Generated_Source\PSoC5/PWM.c ****     PWM_Enable();
  64:Generated_Source\PSoC5/PWM.c **** 
  65:Generated_Source\PSoC5/PWM.c **** }
  66:Generated_Source\PSoC5/PWM.c **** 
  67:Generated_Source\PSoC5/PWM.c **** 
  68:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
  69:Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_Init
  70:Generated_Source\PSoC5/PWM.c **** ********************************************************************************
  71:Generated_Source\PSoC5/PWM.c **** *
  72:Generated_Source\PSoC5/PWM.c **** * Summary:
  73:Generated_Source\PSoC5/PWM.c **** *  Initialize component's parameters to the parameters set by user in the
  74:Generated_Source\PSoC5/PWM.c **** *  customizer of the component placed onto schematic. Usually called in
  75:Generated_Source\PSoC5/PWM.c **** *  PWM_Start().
  76:Generated_Source\PSoC5/PWM.c **** *
  77:Generated_Source\PSoC5/PWM.c **** * Parameters:
  78:Generated_Source\PSoC5/PWM.c **** *  None
  79:Generated_Source\PSoC5/PWM.c **** *
  80:Generated_Source\PSoC5/PWM.c **** * Return:
  81:Generated_Source\PSoC5/PWM.c **** *  None
  82:Generated_Source\PSoC5/PWM.c **** *
  83:Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
  84:Generated_Source\PSoC5/PWM.c **** void PWM_Init(void) 
  85:Generated_Source\PSoC5/PWM.c **** {
  86:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction || PWM_UseControl)
  87:Generated_Source\PSoC5/PWM.c ****         uint8 ctrl;
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 3


  88:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction || PWM_UseControl) */
  89:Generated_Source\PSoC5/PWM.c **** 
  90:Generated_Source\PSoC5/PWM.c ****     #if(!PWM_UsingFixedFunction)
  91:Generated_Source\PSoC5/PWM.c ****         #if(PWM_UseStatus)
  92:Generated_Source\PSoC5/PWM.c ****             /* Interrupt State Backup for Critical Region*/
  93:Generated_Source\PSoC5/PWM.c ****             uint8 PWM_interruptState;
  94:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseStatus) */
  95:Generated_Source\PSoC5/PWM.c ****     #endif /* (!PWM_UsingFixedFunction) */
  96:Generated_Source\PSoC5/PWM.c **** 
  97:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction)
  98:Generated_Source\PSoC5/PWM.c ****         /* You are allowed to write the compare value (FF only) */
  99:Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL |= PWM_CFG0_MODE;
 100:Generated_Source\PSoC5/PWM.c ****         #if (PWM_DeadBand2_4)
 101:Generated_Source\PSoC5/PWM.c ****             PWM_CONTROL |= PWM_CFG0_DB;
 102:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_DeadBand2_4) */
 103:Generated_Source\PSoC5/PWM.c **** 
 104:Generated_Source\PSoC5/PWM.c ****         ctrl = PWM_CONTROL3 & ((uint8 )(~PWM_CTRL_CMPMODE1_MASK));
 105:Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL3 = ctrl | PWM_DEFAULT_COMPARE1_MODE;
 106:Generated_Source\PSoC5/PWM.c **** 
 107:Generated_Source\PSoC5/PWM.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:Generated_Source\PSoC5/PWM.c ****         PWM_RT1 &= ((uint8)(~PWM_RT1_MASK));
 109:Generated_Source\PSoC5/PWM.c ****         PWM_RT1 |= PWM_SYNC;
 110:Generated_Source\PSoC5/PWM.c **** 
 111:Generated_Source\PSoC5/PWM.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:Generated_Source\PSoC5/PWM.c ****         PWM_RT1 &= ((uint8)(~PWM_SYNCDSI_MASK));
 113:Generated_Source\PSoC5/PWM.c ****         PWM_RT1 |= PWM_SYNCDSI_EN;
 114:Generated_Source\PSoC5/PWM.c **** 
 115:Generated_Source\PSoC5/PWM.c ****     #elif (PWM_UseControl)
 116:Generated_Source\PSoC5/PWM.c ****         /* Set the default compare mode defined in the parameter */
 117:Generated_Source\PSoC5/PWM.c ****         ctrl = PWM_CONTROL & ((uint8)(~PWM_CTRL_CMPMODE2_MASK)) &
 118:Generated_Source\PSoC5/PWM.c ****                 ((uint8)(~PWM_CTRL_CMPMODE1_MASK));
 119:Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL = ctrl | PWM_DEFAULT_COMPARE2_MODE |
 120:Generated_Source\PSoC5/PWM.c ****                                    PWM_DEFAULT_COMPARE1_MODE;
 121:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 122:Generated_Source\PSoC5/PWM.c **** 
 123:Generated_Source\PSoC5/PWM.c ****     #if (!PWM_UsingFixedFunction)
 124:Generated_Source\PSoC5/PWM.c ****         #if (PWM_Resolution == 8)
 125:Generated_Source\PSoC5/PWM.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:Generated_Source\PSoC5/PWM.c ****             PWM_AUX_CONTROLDP0 |= (PWM_AUX_CTRL_FIFO0_CLR);
 127:Generated_Source\PSoC5/PWM.c ****         #else /* (PWM_Resolution == 16)*/
 128:Generated_Source\PSoC5/PWM.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:Generated_Source\PSoC5/PWM.c ****             PWM_AUX_CONTROLDP0 |= (PWM_AUX_CTRL_FIFO0_CLR);
 130:Generated_Source\PSoC5/PWM.c ****             PWM_AUX_CONTROLDP1 |= (PWM_AUX_CTRL_FIFO0_CLR);
 131:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_Resolution == 8) */
 132:Generated_Source\PSoC5/PWM.c **** 
 133:Generated_Source\PSoC5/PWM.c ****         PWM_WriteCounter(PWM_INIT_PERIOD_VALUE);
 134:Generated_Source\PSoC5/PWM.c ****     #endif /* (!PWM_UsingFixedFunction) */
 135:Generated_Source\PSoC5/PWM.c **** 
 136:Generated_Source\PSoC5/PWM.c ****     PWM_WritePeriod(PWM_INIT_PERIOD_VALUE);
 137:Generated_Source\PSoC5/PWM.c **** 
 138:Generated_Source\PSoC5/PWM.c ****         #if (PWM_UseOneCompareMode)
 139:Generated_Source\PSoC5/PWM.c ****             PWM_WriteCompare(PWM_INIT_COMPARE_VALUE1);
 140:Generated_Source\PSoC5/PWM.c ****         #else
 141:Generated_Source\PSoC5/PWM.c ****             PWM_WriteCompare1(PWM_INIT_COMPARE_VALUE1);
 142:Generated_Source\PSoC5/PWM.c ****             PWM_WriteCompare2(PWM_INIT_COMPARE_VALUE2);
 143:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseOneCompareMode) */
 144:Generated_Source\PSoC5/PWM.c **** 
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 4


 145:Generated_Source\PSoC5/PWM.c ****         #if (PWM_KillModeMinTime)
 146:Generated_Source\PSoC5/PWM.c ****             PWM_WriteKillTime(PWM_MinimumKillTime);
 147:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_KillModeMinTime) */
 148:Generated_Source\PSoC5/PWM.c **** 
 149:Generated_Source\PSoC5/PWM.c ****         #if (PWM_DeadBandUsed)
 150:Generated_Source\PSoC5/PWM.c ****             PWM_WriteDeadTime(PWM_INIT_DEAD_TIME);
 151:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_DeadBandUsed) */
 152:Generated_Source\PSoC5/PWM.c **** 
 153:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UseStatus || PWM_UsingFixedFunction)
 154:Generated_Source\PSoC5/PWM.c ****         PWM_SetInterruptMode(PWM_INIT_INTERRUPTS_MODE);
 155:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UseStatus || PWM_UsingFixedFunction) */
 156:Generated_Source\PSoC5/PWM.c **** 
 157:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction)
 158:Generated_Source\PSoC5/PWM.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_ENABLE |= PWM_BLOCK_EN_MASK;
 160:Generated_Source\PSoC5/PWM.c ****         /* Set the Interrupt source to come from the status register */
 161:Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL2 |= PWM_CTRL2_IRQ_SEL;
 162:Generated_Source\PSoC5/PWM.c ****     #else
 163:Generated_Source\PSoC5/PWM.c ****         #if(PWM_UseStatus)
 164:Generated_Source\PSoC5/PWM.c **** 
 165:Generated_Source\PSoC5/PWM.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:Generated_Source\PSoC5/PWM.c ****             /* Enter Critical Region*/
 167:Generated_Source\PSoC5/PWM.c ****             PWM_interruptState = CyEnterCriticalSection();
 168:Generated_Source\PSoC5/PWM.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:Generated_Source\PSoC5/PWM.c ****             PWM_STATUS_AUX_CTRL |= PWM_STATUS_ACTL_INT_EN_MASK;
 170:Generated_Source\PSoC5/PWM.c **** 
 171:Generated_Source\PSoC5/PWM.c ****              /* Exit Critical Region*/
 172:Generated_Source\PSoC5/PWM.c ****             CyExitCriticalSection(PWM_interruptState);
 173:Generated_Source\PSoC5/PWM.c **** 
 174:Generated_Source\PSoC5/PWM.c ****             /* Clear the FIFO to enable the PWM_STATUS_FIFOFULL
 175:Generated_Source\PSoC5/PWM.c ****                    bit to be set on FIFO full. */
 176:Generated_Source\PSoC5/PWM.c ****             PWM_ClearFIFO();
 177:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseStatus) */
 178:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 179:Generated_Source\PSoC5/PWM.c **** }
 180:Generated_Source\PSoC5/PWM.c **** 
 181:Generated_Source\PSoC5/PWM.c **** 
 182:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
 183:Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_Enable
 184:Generated_Source\PSoC5/PWM.c **** ********************************************************************************
 185:Generated_Source\PSoC5/PWM.c **** *
 186:Generated_Source\PSoC5/PWM.c **** * Summary:
 187:Generated_Source\PSoC5/PWM.c **** *  Enables the PWM block operation
 188:Generated_Source\PSoC5/PWM.c **** *
 189:Generated_Source\PSoC5/PWM.c **** * Parameters:
 190:Generated_Source\PSoC5/PWM.c **** *  None
 191:Generated_Source\PSoC5/PWM.c **** *
 192:Generated_Source\PSoC5/PWM.c **** * Return:
 193:Generated_Source\PSoC5/PWM.c **** *  None
 194:Generated_Source\PSoC5/PWM.c **** *
 195:Generated_Source\PSoC5/PWM.c **** * Side Effects:
 196:Generated_Source\PSoC5/PWM.c **** *  This works only if software enable mode is chosen
 197:Generated_Source\PSoC5/PWM.c **** *
 198:Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
 199:Generated_Source\PSoC5/PWM.c **** void PWM_Enable(void) 
 200:Generated_Source\PSoC5/PWM.c **** {
  28              		.loc 1 200 0
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 5


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE2:
  36              		.size	PWM_Enable, .-PWM_Enable
  37 0002 00BF     		.section	.text.PWM_Stop,"ax",%progbits
  38              		.align	2
  39              		.global	PWM_Stop
  40              		.thumb
  41              		.thumb_func
  42              		.type	PWM_Stop, %function
  43              	PWM_Stop:
  44              	.LFB3:
 201:Generated_Source\PSoC5/PWM.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction)
 203:Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_ENABLE |= PWM_BLOCK_EN_MASK;
 204:Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_STBY_ENABLE |= PWM_BLOCK_STBY_EN_MASK;
 205:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 206:Generated_Source\PSoC5/PWM.c **** 
 207:Generated_Source\PSoC5/PWM.c ****     /* Enable the PWM from the control register  */
 208:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UseControl || PWM_UsingFixedFunction)
 209:Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL |= PWM_CTRL_ENABLE;
 210:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UseControl || PWM_UsingFixedFunction) */
 211:Generated_Source\PSoC5/PWM.c **** }
 212:Generated_Source\PSoC5/PWM.c **** 
 213:Generated_Source\PSoC5/PWM.c **** 
 214:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
 215:Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_Stop
 216:Generated_Source\PSoC5/PWM.c **** ********************************************************************************
 217:Generated_Source\PSoC5/PWM.c **** *
 218:Generated_Source\PSoC5/PWM.c **** * Summary:
 219:Generated_Source\PSoC5/PWM.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:Generated_Source\PSoC5/PWM.c **** *  interrupts.
 221:Generated_Source\PSoC5/PWM.c **** *
 222:Generated_Source\PSoC5/PWM.c **** * Parameters:
 223:Generated_Source\PSoC5/PWM.c **** *  None
 224:Generated_Source\PSoC5/PWM.c **** *
 225:Generated_Source\PSoC5/PWM.c **** * Return:
 226:Generated_Source\PSoC5/PWM.c **** *  None
 227:Generated_Source\PSoC5/PWM.c **** *
 228:Generated_Source\PSoC5/PWM.c **** * Side Effects:
 229:Generated_Source\PSoC5/PWM.c **** *  If the Enable mode is set to Hardware only then this function
 230:Generated_Source\PSoC5/PWM.c **** *  has no effect on the operation of the PWM
 231:Generated_Source\PSoC5/PWM.c **** *
 232:Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
 233:Generated_Source\PSoC5/PWM.c **** void PWM_Stop(void) 
 234:Generated_Source\PSoC5/PWM.c **** {
  45              		.loc 1 234 0
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 0
  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              		@ link register save eliminated.
  50 0000 7047     		bx	lr
  51              		.cfi_endproc
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 6


  52              	.LFE3:
  53              		.size	PWM_Stop, .-PWM_Stop
  54 0002 00BF     		.section	.text.PWM_WriteCounter,"ax",%progbits
  55              		.align	2
  56              		.global	PWM_WriteCounter
  57              		.thumb
  58              		.thumb_func
  59              		.type	PWM_WriteCounter, %function
  60              	PWM_WriteCounter:
  61              	.LFB4:
 235:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UseControl || PWM_UsingFixedFunction)
 236:Generated_Source\PSoC5/PWM.c ****         PWM_CONTROL &= ((uint8)(~PWM_CTRL_ENABLE));
 237:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UseControl || PWM_UsingFixedFunction) */
 238:Generated_Source\PSoC5/PWM.c **** 
 239:Generated_Source\PSoC5/PWM.c ****     /* Globally disable the Fixed Function Block chosen */
 240:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction)
 241:Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_ENABLE &= ((uint8)(~PWM_BLOCK_EN_MASK));
 242:Generated_Source\PSoC5/PWM.c ****         PWM_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM_BLOCK_STBY_EN_MASK));
 243:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 244:Generated_Source\PSoC5/PWM.c **** }
 245:Generated_Source\PSoC5/PWM.c **** 
 246:Generated_Source\PSoC5/PWM.c **** #if (PWM_UseOneCompareMode)
 247:Generated_Source\PSoC5/PWM.c ****     #if (PWM_CompareMode1SW)
 248:Generated_Source\PSoC5/PWM.c **** 
 249:Generated_Source\PSoC5/PWM.c **** 
 250:Generated_Source\PSoC5/PWM.c ****         /*******************************************************************************
 251:Generated_Source\PSoC5/PWM.c ****         * Function Name: PWM_SetCompareMode
 252:Generated_Source\PSoC5/PWM.c ****         ********************************************************************************
 253:Generated_Source\PSoC5/PWM.c ****         *
 254:Generated_Source\PSoC5/PWM.c ****         * Summary:
 255:Generated_Source\PSoC5/PWM.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:Generated_Source\PSoC5/PWM.c ****         *  Center Align Mode or One Output Mode.
 257:Generated_Source\PSoC5/PWM.c ****         *
 258:Generated_Source\PSoC5/PWM.c ****         * Parameters:
 259:Generated_Source\PSoC5/PWM.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:Generated_Source\PSoC5/PWM.c ****         *                defined in the H file as input arguments.
 261:Generated_Source\PSoC5/PWM.c ****         *
 262:Generated_Source\PSoC5/PWM.c ****         * Return:
 263:Generated_Source\PSoC5/PWM.c ****         *  None
 264:Generated_Source\PSoC5/PWM.c ****         *
 265:Generated_Source\PSoC5/PWM.c ****         *******************************************************************************/
 266:Generated_Source\PSoC5/PWM.c ****         void PWM_SetCompareMode(uint8 comparemode) 
 267:Generated_Source\PSoC5/PWM.c ****         {
 268:Generated_Source\PSoC5/PWM.c ****             #if(PWM_UsingFixedFunction)
 269:Generated_Source\PSoC5/PWM.c **** 
 270:Generated_Source\PSoC5/PWM.c ****                 #if(0 != PWM_CTRL_CMPMODE1_SHIFT)
 271:Generated_Source\PSoC5/PWM.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE1_SHIF
 272:Generated_Source\PSoC5/PWM.c ****                 #else
 273:Generated_Source\PSoC5/PWM.c ****                     uint8 comparemodemasked = comparemode;
 274:Generated_Source\PSoC5/PWM.c ****                 #endif /* (0 != PWM_CTRL_CMPMODE1_SHIFT) */
 275:Generated_Source\PSoC5/PWM.c **** 
 276:Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL3 &= ((uint8)(~PWM_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
 277:Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL3 |= comparemodemasked;
 278:Generated_Source\PSoC5/PWM.c **** 
 279:Generated_Source\PSoC5/PWM.c ****             #elif (PWM_UseControl)
 280:Generated_Source\PSoC5/PWM.c **** 
 281:Generated_Source\PSoC5/PWM.c ****                 #if(0 != PWM_CTRL_CMPMODE1_SHIFT)
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 7


 282:Generated_Source\PSoC5/PWM.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE1_SHI
 283:Generated_Source\PSoC5/PWM.c ****                                                 PWM_CTRL_CMPMODE1_MASK;
 284:Generated_Source\PSoC5/PWM.c ****                 #else
 285:Generated_Source\PSoC5/PWM.c ****                     uint8 comparemode1masked = comparemode & PWM_CTRL_CMPMODE1_MASK;
 286:Generated_Source\PSoC5/PWM.c ****                 #endif /* (0 != PWM_CTRL_CMPMODE1_SHIFT) */
 287:Generated_Source\PSoC5/PWM.c **** 
 288:Generated_Source\PSoC5/PWM.c ****                 #if(0 != PWM_CTRL_CMPMODE2_SHIFT)
 289:Generated_Source\PSoC5/PWM.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE2_SHI
 290:Generated_Source\PSoC5/PWM.c ****                                                PWM_CTRL_CMPMODE2_MASK;
 291:Generated_Source\PSoC5/PWM.c ****                 #else
 292:Generated_Source\PSoC5/PWM.c ****                     uint8 comparemode2masked = comparemode & PWM_CTRL_CMPMODE2_MASK;
 293:Generated_Source\PSoC5/PWM.c ****                 #endif /* (0 != PWM_CTRL_CMPMODE2_SHIFT) */
 294:Generated_Source\PSoC5/PWM.c **** 
 295:Generated_Source\PSoC5/PWM.c ****                 /*Clear existing mode */
 296:Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL &= ((uint8)(~(PWM_CTRL_CMPMODE1_MASK |
 297:Generated_Source\PSoC5/PWM.c ****                                             PWM_CTRL_CMPMODE2_MASK)));
 298:Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL |= (comparemode1masked | comparemode2masked);
 299:Generated_Source\PSoC5/PWM.c **** 
 300:Generated_Source\PSoC5/PWM.c ****             #else
 301:Generated_Source\PSoC5/PWM.c ****                 uint8 temp = comparemode;
 302:Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_UsingFixedFunction) */
 303:Generated_Source\PSoC5/PWM.c ****         }
 304:Generated_Source\PSoC5/PWM.c ****     #endif /* PWM_CompareMode1SW */
 305:Generated_Source\PSoC5/PWM.c **** 
 306:Generated_Source\PSoC5/PWM.c **** #else /* UseOneCompareMode */
 307:Generated_Source\PSoC5/PWM.c **** 
 308:Generated_Source\PSoC5/PWM.c ****     #if (PWM_CompareMode1SW)
 309:Generated_Source\PSoC5/PWM.c **** 
 310:Generated_Source\PSoC5/PWM.c **** 
 311:Generated_Source\PSoC5/PWM.c ****         /*******************************************************************************
 312:Generated_Source\PSoC5/PWM.c ****         * Function Name: PWM_SetCompareMode1
 313:Generated_Source\PSoC5/PWM.c ****         ********************************************************************************
 314:Generated_Source\PSoC5/PWM.c ****         *
 315:Generated_Source\PSoC5/PWM.c ****         * Summary:
 316:Generated_Source\PSoC5/PWM.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:Generated_Source\PSoC5/PWM.c ****         *
 318:Generated_Source\PSoC5/PWM.c ****         * Parameters:
 319:Generated_Source\PSoC5/PWM.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:Generated_Source\PSoC5/PWM.c ****         *                defined in the H file as input arguments.
 321:Generated_Source\PSoC5/PWM.c ****         *
 322:Generated_Source\PSoC5/PWM.c ****         * Return:
 323:Generated_Source\PSoC5/PWM.c ****         *  None
 324:Generated_Source\PSoC5/PWM.c ****         *
 325:Generated_Source\PSoC5/PWM.c ****         *******************************************************************************/
 326:Generated_Source\PSoC5/PWM.c ****         void PWM_SetCompareMode1(uint8 comparemode) 
 327:Generated_Source\PSoC5/PWM.c ****         {
 328:Generated_Source\PSoC5/PWM.c ****             #if(0 != PWM_CTRL_CMPMODE1_SHIFT)
 329:Generated_Source\PSoC5/PWM.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE1_SHIFT)) 
 330:Generated_Source\PSoC5/PWM.c ****                                            PWM_CTRL_CMPMODE1_MASK;
 331:Generated_Source\PSoC5/PWM.c ****             #else
 332:Generated_Source\PSoC5/PWM.c ****                 uint8 comparemodemasked = comparemode & PWM_CTRL_CMPMODE1_MASK;
 333:Generated_Source\PSoC5/PWM.c ****             #endif /* (0 != PWM_CTRL_CMPMODE1_SHIFT) */
 334:Generated_Source\PSoC5/PWM.c **** 
 335:Generated_Source\PSoC5/PWM.c ****             #if (PWM_UseControl)
 336:Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL &= ((uint8)(~PWM_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
 337:Generated_Source\PSoC5/PWM.c ****                 PWM_CONTROL |= comparemodemasked;
 338:Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_UseControl) */
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 8


 339:Generated_Source\PSoC5/PWM.c ****         }
 340:Generated_Source\PSoC5/PWM.c ****     #endif /* PWM_CompareMode1SW */
 341:Generated_Source\PSoC5/PWM.c **** 
 342:Generated_Source\PSoC5/PWM.c **** #if (PWM_CompareMode2SW)
 343:Generated_Source\PSoC5/PWM.c **** 
 344:Generated_Source\PSoC5/PWM.c **** 
 345:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 346:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_SetCompareMode2
 347:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 348:Generated_Source\PSoC5/PWM.c ****     *
 349:Generated_Source\PSoC5/PWM.c ****     * Summary:
 350:Generated_Source\PSoC5/PWM.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:Generated_Source\PSoC5/PWM.c ****     *
 352:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 353:Generated_Source\PSoC5/PWM.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:Generated_Source\PSoC5/PWM.c ****     *                defined in the H file as input arguments.
 355:Generated_Source\PSoC5/PWM.c ****     *
 356:Generated_Source\PSoC5/PWM.c ****     * Return:
 357:Generated_Source\PSoC5/PWM.c ****     *  None
 358:Generated_Source\PSoC5/PWM.c ****     *
 359:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 360:Generated_Source\PSoC5/PWM.c ****     void PWM_SetCompareMode2(uint8 comparemode) 
 361:Generated_Source\PSoC5/PWM.c ****     {
 362:Generated_Source\PSoC5/PWM.c **** 
 363:Generated_Source\PSoC5/PWM.c ****         #if(0 != PWM_CTRL_CMPMODE2_SHIFT)
 364:Generated_Source\PSoC5/PWM.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE2_SHIFT)) &
 365:Generated_Source\PSoC5/PWM.c ****                                                  PWM_CTRL_CMPMODE2_MASK;
 366:Generated_Source\PSoC5/PWM.c ****         #else
 367:Generated_Source\PSoC5/PWM.c ****             uint8 comparemodemasked = comparemode & PWM_CTRL_CMPMODE2_MASK;
 368:Generated_Source\PSoC5/PWM.c ****         #endif /* (0 != PWM_CTRL_CMPMODE2_SHIFT) */
 369:Generated_Source\PSoC5/PWM.c **** 
 370:Generated_Source\PSoC5/PWM.c ****         #if (PWM_UseControl)
 371:Generated_Source\PSoC5/PWM.c ****             PWM_CONTROL &= ((uint8)(~PWM_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:Generated_Source\PSoC5/PWM.c ****             PWM_CONTROL |= comparemodemasked;
 373:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseControl) */
 374:Generated_Source\PSoC5/PWM.c ****     }
 375:Generated_Source\PSoC5/PWM.c ****     #endif /*PWM_CompareMode2SW */
 376:Generated_Source\PSoC5/PWM.c **** 
 377:Generated_Source\PSoC5/PWM.c **** #endif /* UseOneCompareMode */
 378:Generated_Source\PSoC5/PWM.c **** 
 379:Generated_Source\PSoC5/PWM.c **** 
 380:Generated_Source\PSoC5/PWM.c **** #if (!PWM_UsingFixedFunction)
 381:Generated_Source\PSoC5/PWM.c **** 
 382:Generated_Source\PSoC5/PWM.c **** 
 383:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 384:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteCounter
 385:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 386:Generated_Source\PSoC5/PWM.c ****     *
 387:Generated_Source\PSoC5/PWM.c ****     * Summary:
 388:Generated_Source\PSoC5/PWM.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:Generated_Source\PSoC5/PWM.c ****     *  implemented for that currently running period and only that period. This API
 390:Generated_Source\PSoC5/PWM.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:Generated_Source\PSoC5/PWM.c ****     *  PWM implementation.
 392:Generated_Source\PSoC5/PWM.c ****     *
 393:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 394:Generated_Source\PSoC5/PWM.c ****     *  counter:  The period new period counter value.
 395:Generated_Source\PSoC5/PWM.c ****     *
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 9


 396:Generated_Source\PSoC5/PWM.c ****     * Return:
 397:Generated_Source\PSoC5/PWM.c ****     *  None
 398:Generated_Source\PSoC5/PWM.c ****     *
 399:Generated_Source\PSoC5/PWM.c ****     * Side Effects:
 400:Generated_Source\PSoC5/PWM.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:Generated_Source\PSoC5/PWM.c ****     *
 402:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 403:Generated_Source\PSoC5/PWM.c ****     void PWM_WriteCounter(uint8 counter) \
 404:Generated_Source\PSoC5/PWM.c ****                                        
 405:Generated_Source\PSoC5/PWM.c ****     {
  62              		.loc 1 405 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67              	.LVL0:
 406:Generated_Source\PSoC5/PWM.c ****         CY_SET_REG8(PWM_COUNTER_LSB_PTR, counter);
  68              		.loc 1 406 0
  69 0000 014B     		ldr	r3, .L4
  70 0002 1870     		strb	r0, [r3]
  71 0004 7047     		bx	lr
  72              	.L5:
  73 0006 00BF     		.align	2
  74              	.L4:
  75 0008 0D640040 		.word	1073767437
  76              		.cfi_endproc
  77              	.LFE4:
  78              		.size	PWM_WriteCounter, .-PWM_WriteCounter
  79              		.section	.text.PWM_ReadCounter,"ax",%progbits
  80              		.align	2
  81              		.global	PWM_ReadCounter
  82              		.thumb
  83              		.thumb_func
  84              		.type	PWM_ReadCounter, %function
  85              	PWM_ReadCounter:
  86              	.LFB5:
 407:Generated_Source\PSoC5/PWM.c ****     }
 408:Generated_Source\PSoC5/PWM.c **** 
 409:Generated_Source\PSoC5/PWM.c **** 
 410:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 411:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCounter
 412:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 413:Generated_Source\PSoC5/PWM.c ****     *
 414:Generated_Source\PSoC5/PWM.c ****     * Summary:
 415:Generated_Source\PSoC5/PWM.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:Generated_Source\PSoC5/PWM.c ****     *  if the counter is enabled or running.
 417:Generated_Source\PSoC5/PWM.c ****     *
 418:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 419:Generated_Source\PSoC5/PWM.c ****     *  None
 420:Generated_Source\PSoC5/PWM.c ****     *
 421:Generated_Source\PSoC5/PWM.c ****     * Return:
 422:Generated_Source\PSoC5/PWM.c ****     *  The current value of the counter.
 423:Generated_Source\PSoC5/PWM.c ****     *
 424:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 425:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadCounter(void) 
 426:Generated_Source\PSoC5/PWM.c ****     {
  87              		.loc 1 426 0
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 10


  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
 427:Generated_Source\PSoC5/PWM.c ****         /* Force capture by reading Accumulator */
 428:Generated_Source\PSoC5/PWM.c ****         /* Must first do a software capture to be able to read the counter */
 429:Generated_Source\PSoC5/PWM.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:Generated_Source\PSoC5/PWM.c ****           (void)CY_GET_REG8(PWM_COUNTERCAP_LSB_PTR_8BIT);
  92              		.loc 1 430 0
  93 0000 024B     		ldr	r3, .L7
  94 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 431:Generated_Source\PSoC5/PWM.c **** 
 432:Generated_Source\PSoC5/PWM.c ****         /* Read the data from the FIFO */
 433:Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_CAPTURE_LSB_PTR));
  95              		.loc 1 433 0
  96 0004 024B     		ldr	r3, .L7+4
  97 0006 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 434:Generated_Source\PSoC5/PWM.c ****     }
  98              		.loc 1 434 0
  99 0008 7047     		bx	lr
 100              	.L8:
 101 000a 00BF     		.align	2
 102              	.L7:
 103 000c 1D640040 		.word	1073767453
 104 0010 5D640040 		.word	1073767517
 105              		.cfi_endproc
 106              	.LFE5:
 107              		.size	PWM_ReadCounter, .-PWM_ReadCounter
 108              		.section	.text.PWM_WritePeriod,"ax",%progbits
 109              		.align	2
 110              		.global	PWM_WritePeriod
 111              		.thumb
 112              		.thumb_func
 113              		.type	PWM_WritePeriod, %function
 114              	PWM_WritePeriod:
 115              	.LFB7:
 435:Generated_Source\PSoC5/PWM.c **** 
 436:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UseStatus)
 437:Generated_Source\PSoC5/PWM.c **** 
 438:Generated_Source\PSoC5/PWM.c **** 
 439:Generated_Source\PSoC5/PWM.c ****         /*******************************************************************************
 440:Generated_Source\PSoC5/PWM.c ****         * Function Name: PWM_ClearFIFO
 441:Generated_Source\PSoC5/PWM.c ****         ********************************************************************************
 442:Generated_Source\PSoC5/PWM.c ****         *
 443:Generated_Source\PSoC5/PWM.c ****         * Summary:
 444:Generated_Source\PSoC5/PWM.c ****         *  This function clears all capture data from the capture FIFO
 445:Generated_Source\PSoC5/PWM.c ****         *
 446:Generated_Source\PSoC5/PWM.c ****         * Parameters:
 447:Generated_Source\PSoC5/PWM.c ****         *  None
 448:Generated_Source\PSoC5/PWM.c ****         *
 449:Generated_Source\PSoC5/PWM.c ****         * Return:
 450:Generated_Source\PSoC5/PWM.c ****         *  None
 451:Generated_Source\PSoC5/PWM.c ****         *
 452:Generated_Source\PSoC5/PWM.c ****         *******************************************************************************/
 453:Generated_Source\PSoC5/PWM.c ****         void PWM_ClearFIFO(void) 
 454:Generated_Source\PSoC5/PWM.c ****         {
 455:Generated_Source\PSoC5/PWM.c ****             while(0u != (PWM_ReadStatusRegister() & PWM_STATUS_FIFONEMPTY))
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 11


 456:Generated_Source\PSoC5/PWM.c ****             {
 457:Generated_Source\PSoC5/PWM.c ****                 (void)PWM_ReadCapture();
 458:Generated_Source\PSoC5/PWM.c ****             }
 459:Generated_Source\PSoC5/PWM.c ****         }
 460:Generated_Source\PSoC5/PWM.c **** 
 461:Generated_Source\PSoC5/PWM.c ****     #endif /* PWM_UseStatus */
 462:Generated_Source\PSoC5/PWM.c **** 
 463:Generated_Source\PSoC5/PWM.c **** #endif /* !PWM_UsingFixedFunction */
 464:Generated_Source\PSoC5/PWM.c **** 
 465:Generated_Source\PSoC5/PWM.c **** 
 466:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
 467:Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_WritePeriod
 468:Generated_Source\PSoC5/PWM.c **** ********************************************************************************
 469:Generated_Source\PSoC5/PWM.c **** *
 470:Generated_Source\PSoC5/PWM.c **** * Summary:
 471:Generated_Source\PSoC5/PWM.c **** *  This function is used to change the period of the counter.  The new period
 472:Generated_Source\PSoC5/PWM.c **** *  will be loaded the next time terminal count is detected.
 473:Generated_Source\PSoC5/PWM.c **** *
 474:Generated_Source\PSoC5/PWM.c **** * Parameters:
 475:Generated_Source\PSoC5/PWM.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:Generated_Source\PSoC5/PWM.c **** *           will result in the counter remaining at zero.
 477:Generated_Source\PSoC5/PWM.c **** *
 478:Generated_Source\PSoC5/PWM.c **** * Return:
 479:Generated_Source\PSoC5/PWM.c **** *  None
 480:Generated_Source\PSoC5/PWM.c **** *
 481:Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
 482:Generated_Source\PSoC5/PWM.c **** void PWM_WritePeriod(uint8 period) 
 483:Generated_Source\PSoC5/PWM.c **** {
 116              		.loc 1 483 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121              	.LVL1:
 484:Generated_Source\PSoC5/PWM.c ****     #if(PWM_UsingFixedFunction)
 485:Generated_Source\PSoC5/PWM.c ****         CY_SET_REG16(PWM_PERIOD_LSB_PTR, (uint16)period);
 486:Generated_Source\PSoC5/PWM.c ****     #else
 487:Generated_Source\PSoC5/PWM.c ****         CY_SET_REG8(PWM_PERIOD_LSB_PTR, period);
 122              		.loc 1 487 0
 123 0000 014B     		ldr	r3, .L10
 124 0002 1870     		strb	r0, [r3]
 125 0004 7047     		bx	lr
 126              	.L11:
 127 0006 00BF     		.align	2
 128              	.L10:
 129 0008 4D640040 		.word	1073767501
 130              		.cfi_endproc
 131              	.LFE7:
 132              		.size	PWM_WritePeriod, .-PWM_WritePeriod
 133              		.section	.text.PWM_WriteCompare,"ax",%progbits
 134              		.align	2
 135              		.global	PWM_WriteCompare
 136              		.thumb
 137              		.thumb_func
 138              		.type	PWM_WriteCompare, %function
 139              	PWM_WriteCompare:
 140              	.LFB8:
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 12


 488:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 489:Generated_Source\PSoC5/PWM.c **** }
 490:Generated_Source\PSoC5/PWM.c **** 
 491:Generated_Source\PSoC5/PWM.c **** #if (PWM_UseOneCompareMode)
 492:Generated_Source\PSoC5/PWM.c **** 
 493:Generated_Source\PSoC5/PWM.c **** 
 494:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 495:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteCompare
 496:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 497:Generated_Source\PSoC5/PWM.c ****     *
 498:Generated_Source\PSoC5/PWM.c ****     * Summary:
 499:Generated_Source\PSoC5/PWM.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:Generated_Source\PSoC5/PWM.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:Generated_Source\PSoC5/PWM.c ****     *  The compare output will be driven high when the present counter value is
 502:Generated_Source\PSoC5/PWM.c ****     *  compared to the compare value based on the compare mode defined in
 503:Generated_Source\PSoC5/PWM.c ****     *  Dither Mode.
 504:Generated_Source\PSoC5/PWM.c ****     *
 505:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 506:Generated_Source\PSoC5/PWM.c ****     *  compare:  New compare value.
 507:Generated_Source\PSoC5/PWM.c ****     *
 508:Generated_Source\PSoC5/PWM.c ****     * Return:
 509:Generated_Source\PSoC5/PWM.c ****     *  None
 510:Generated_Source\PSoC5/PWM.c ****     *
 511:Generated_Source\PSoC5/PWM.c ****     * Side Effects:
 512:Generated_Source\PSoC5/PWM.c ****     *  This function is only available if the PWM mode parameter is set to
 513:Generated_Source\PSoC5/PWM.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:Generated_Source\PSoC5/PWM.c ****     *
 515:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 516:Generated_Source\PSoC5/PWM.c ****     void PWM_WriteCompare(uint8 compare) \
 517:Generated_Source\PSoC5/PWM.c ****                                        
 518:Generated_Source\PSoC5/PWM.c ****     {
 141              		.loc 1 518 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              		@ link register save eliminated.
 146              	.LVL2:
 519:Generated_Source\PSoC5/PWM.c ****         #if(PWM_UsingFixedFunction)
 520:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG16(PWM_COMPARE1_LSB_PTR, (uint16)compare);
 521:Generated_Source\PSoC5/PWM.c ****         #else
 522:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG8(PWM_COMPARE1_LSB_PTR, compare);
 147              		.loc 1 522 0
 148 0000 014B     		ldr	r3, .L13
 149 0002 1870     		strb	r0, [r3]
 150 0004 7047     		bx	lr
 151              	.L14:
 152 0006 00BF     		.align	2
 153              	.L13:
 154 0008 2D640040 		.word	1073767469
 155              		.cfi_endproc
 156              	.LFE8:
 157              		.size	PWM_WriteCompare, .-PWM_WriteCompare
 158              		.section	.text.PWM_SetInterruptMode,"ax",%progbits
 159              		.align	2
 160              		.global	PWM_SetInterruptMode
 161              		.thumb
 162              		.thumb_func
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 13


 163              		.type	PWM_SetInterruptMode, %function
 164              	PWM_SetInterruptMode:
 165              	.LFB9:
 523:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 524:Generated_Source\PSoC5/PWM.c **** 
 525:Generated_Source\PSoC5/PWM.c ****         #if (PWM_PWMMode == PWM__B_PWM__DITHER)
 526:Generated_Source\PSoC5/PWM.c ****             #if(PWM_UsingFixedFunction)
 527:Generated_Source\PSoC5/PWM.c ****                 CY_SET_REG16(PWM_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:Generated_Source\PSoC5/PWM.c ****             #else
 529:Generated_Source\PSoC5/PWM.c ****                 CY_SET_REG8(PWM_COMPARE2_LSB_PTR, (compare + 1u));
 530:Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_UsingFixedFunction) */
 531:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_PWMMode == PWM__B_PWM__DITHER) */
 532:Generated_Source\PSoC5/PWM.c ****     }
 533:Generated_Source\PSoC5/PWM.c **** 
 534:Generated_Source\PSoC5/PWM.c **** 
 535:Generated_Source\PSoC5/PWM.c **** #else
 536:Generated_Source\PSoC5/PWM.c **** 
 537:Generated_Source\PSoC5/PWM.c **** 
 538:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 539:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteCompare1
 540:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 541:Generated_Source\PSoC5/PWM.c ****     *
 542:Generated_Source\PSoC5/PWM.c ****     * Summary:
 543:Generated_Source\PSoC5/PWM.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:Generated_Source\PSoC5/PWM.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:Generated_Source\PSoC5/PWM.c ****     *  driven high when the present counter value is less than or less than or
 546:Generated_Source\PSoC5/PWM.c ****     *  equal to the compare register, depending on the mode.
 547:Generated_Source\PSoC5/PWM.c ****     *
 548:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 549:Generated_Source\PSoC5/PWM.c ****     *  compare:  New compare value.
 550:Generated_Source\PSoC5/PWM.c ****     *
 551:Generated_Source\PSoC5/PWM.c ****     * Return:
 552:Generated_Source\PSoC5/PWM.c ****     *  None
 553:Generated_Source\PSoC5/PWM.c ****     *
 554:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 555:Generated_Source\PSoC5/PWM.c ****     void PWM_WriteCompare1(uint8 compare) \
 556:Generated_Source\PSoC5/PWM.c ****                                         
 557:Generated_Source\PSoC5/PWM.c ****     {
 558:Generated_Source\PSoC5/PWM.c ****         #if(PWM_UsingFixedFunction)
 559:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG16(PWM_COMPARE1_LSB_PTR, (uint16)compare);
 560:Generated_Source\PSoC5/PWM.c ****         #else
 561:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG8(PWM_COMPARE1_LSB_PTR, compare);
 562:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 563:Generated_Source\PSoC5/PWM.c ****     }
 564:Generated_Source\PSoC5/PWM.c **** 
 565:Generated_Source\PSoC5/PWM.c **** 
 566:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 567:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteCompare2
 568:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 569:Generated_Source\PSoC5/PWM.c ****     *
 570:Generated_Source\PSoC5/PWM.c ****     * Summary:
 571:Generated_Source\PSoC5/PWM.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:Generated_Source\PSoC5/PWM.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:Generated_Source\PSoC5/PWM.c ****     *  The compare output will be driven high when the present counter value is
 574:Generated_Source\PSoC5/PWM.c ****     *  less than or less than or equal to the compare register, depending on the
 575:Generated_Source\PSoC5/PWM.c ****     *  mode.
 576:Generated_Source\PSoC5/PWM.c ****     *
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 14


 577:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 578:Generated_Source\PSoC5/PWM.c ****     *  compare:  New compare value.
 579:Generated_Source\PSoC5/PWM.c ****     *
 580:Generated_Source\PSoC5/PWM.c ****     * Return:
 581:Generated_Source\PSoC5/PWM.c ****     *  None
 582:Generated_Source\PSoC5/PWM.c ****     *
 583:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 584:Generated_Source\PSoC5/PWM.c ****     void PWM_WriteCompare2(uint8 compare) \
 585:Generated_Source\PSoC5/PWM.c ****                                         
 586:Generated_Source\PSoC5/PWM.c ****     {
 587:Generated_Source\PSoC5/PWM.c ****         #if(PWM_UsingFixedFunction)
 588:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG16(PWM_COMPARE2_LSB_PTR, compare);
 589:Generated_Source\PSoC5/PWM.c ****         #else
 590:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG8(PWM_COMPARE2_LSB_PTR, compare);
 591:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 592:Generated_Source\PSoC5/PWM.c ****     }
 593:Generated_Source\PSoC5/PWM.c **** #endif /* UseOneCompareMode */
 594:Generated_Source\PSoC5/PWM.c **** 
 595:Generated_Source\PSoC5/PWM.c **** #if (PWM_DeadBandUsed)
 596:Generated_Source\PSoC5/PWM.c **** 
 597:Generated_Source\PSoC5/PWM.c **** 
 598:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 599:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteDeadTime
 600:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 601:Generated_Source\PSoC5/PWM.c ****     *
 602:Generated_Source\PSoC5/PWM.c ****     * Summary:
 603:Generated_Source\PSoC5/PWM.c ****     *  This function writes the dead-band counts to the corresponding register
 604:Generated_Source\PSoC5/PWM.c ****     *
 605:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 606:Generated_Source\PSoC5/PWM.c ****     *  deadtime:  Number of counts for dead time
 607:Generated_Source\PSoC5/PWM.c ****     *
 608:Generated_Source\PSoC5/PWM.c ****     * Return:
 609:Generated_Source\PSoC5/PWM.c ****     *  None
 610:Generated_Source\PSoC5/PWM.c ****     *
 611:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 612:Generated_Source\PSoC5/PWM.c ****     void PWM_WriteDeadTime(uint8 deadtime) 
 613:Generated_Source\PSoC5/PWM.c ****     {
 614:Generated_Source\PSoC5/PWM.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:Generated_Source\PSoC5/PWM.c ****         #if(!PWM_DeadBand2_4)
 616:Generated_Source\PSoC5/PWM.c ****             CY_SET_REG8(PWM_DEADBAND_COUNT_PTR, deadtime);
 617:Generated_Source\PSoC5/PWM.c ****         #else
 618:Generated_Source\PSoC5/PWM.c ****             /* Otherwise the data has to be masked and offset */
 619:Generated_Source\PSoC5/PWM.c ****             /* Clear existing data */
 620:Generated_Source\PSoC5/PWM.c ****             PWM_DEADBAND_COUNT &= ((uint8)(~PWM_DEADBAND_COUNT_MASK));
 621:Generated_Source\PSoC5/PWM.c **** 
 622:Generated_Source\PSoC5/PWM.c ****             /* Set new dead time */
 623:Generated_Source\PSoC5/PWM.c ****             #if(PWM_DEADBAND_COUNT_SHIFT)
 624:Generated_Source\PSoC5/PWM.c ****                 PWM_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM_DEADBAND_COUNT_SHIFT)) &
 625:Generated_Source\PSoC5/PWM.c ****                                                     PWM_DEADBAND_COUNT_MASK;
 626:Generated_Source\PSoC5/PWM.c ****             #else
 627:Generated_Source\PSoC5/PWM.c ****                 PWM_DEADBAND_COUNT |= deadtime & PWM_DEADBAND_COUNT_MASK;
 628:Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_DEADBAND_COUNT_SHIFT) */
 629:Generated_Source\PSoC5/PWM.c **** 
 630:Generated_Source\PSoC5/PWM.c ****         #endif /* (!PWM_DeadBand2_4) */
 631:Generated_Source\PSoC5/PWM.c ****     }
 632:Generated_Source\PSoC5/PWM.c **** 
 633:Generated_Source\PSoC5/PWM.c **** 
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 15


 634:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 635:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadDeadTime
 636:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 637:Generated_Source\PSoC5/PWM.c ****     *
 638:Generated_Source\PSoC5/PWM.c ****     * Summary:
 639:Generated_Source\PSoC5/PWM.c ****     *  This function reads the dead-band counts from the corresponding register
 640:Generated_Source\PSoC5/PWM.c ****     *
 641:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 642:Generated_Source\PSoC5/PWM.c ****     *  None
 643:Generated_Source\PSoC5/PWM.c ****     *
 644:Generated_Source\PSoC5/PWM.c ****     * Return:
 645:Generated_Source\PSoC5/PWM.c ****     *  Dead Band Counts
 646:Generated_Source\PSoC5/PWM.c ****     *
 647:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 648:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadDeadTime(void) 
 649:Generated_Source\PSoC5/PWM.c ****     {
 650:Generated_Source\PSoC5/PWM.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:Generated_Source\PSoC5/PWM.c ****         #if(!PWM_DeadBand2_4)
 652:Generated_Source\PSoC5/PWM.c ****             return (CY_GET_REG8(PWM_DEADBAND_COUNT_PTR));
 653:Generated_Source\PSoC5/PWM.c ****         #else
 654:Generated_Source\PSoC5/PWM.c **** 
 655:Generated_Source\PSoC5/PWM.c ****             /* Otherwise the data has to be masked and offset */
 656:Generated_Source\PSoC5/PWM.c ****             #if(PWM_DEADBAND_COUNT_SHIFT)
 657:Generated_Source\PSoC5/PWM.c ****                 return ((uint8)(((uint8)(PWM_DEADBAND_COUNT & PWM_DEADBAND_COUNT_MASK)) >>
 658:Generated_Source\PSoC5/PWM.c ****                                                                            PWM_DEADBAND_COUNT_SHIFT
 659:Generated_Source\PSoC5/PWM.c ****             #else
 660:Generated_Source\PSoC5/PWM.c ****                 return (PWM_DEADBAND_COUNT & PWM_DEADBAND_COUNT_MASK);
 661:Generated_Source\PSoC5/PWM.c ****             #endif /* (PWM_DEADBAND_COUNT_SHIFT) */
 662:Generated_Source\PSoC5/PWM.c ****         #endif /* (!PWM_DeadBand2_4) */
 663:Generated_Source\PSoC5/PWM.c ****     }
 664:Generated_Source\PSoC5/PWM.c **** #endif /* DeadBandUsed */
 665:Generated_Source\PSoC5/PWM.c **** 
 666:Generated_Source\PSoC5/PWM.c **** #if (PWM_UseStatus || PWM_UsingFixedFunction)
 667:Generated_Source\PSoC5/PWM.c **** 
 668:Generated_Source\PSoC5/PWM.c **** 
 669:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 670:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_SetInterruptMode
 671:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 672:Generated_Source\PSoC5/PWM.c ****     *
 673:Generated_Source\PSoC5/PWM.c ****     * Summary:
 674:Generated_Source\PSoC5/PWM.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:Generated_Source\PSoC5/PWM.c ****     *  source status register.
 676:Generated_Source\PSoC5/PWM.c ****     *
 677:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 678:Generated_Source\PSoC5/PWM.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:Generated_Source\PSoC5/PWM.c ****     *
 680:Generated_Source\PSoC5/PWM.c ****     * Return:
 681:Generated_Source\PSoC5/PWM.c ****     *  None
 682:Generated_Source\PSoC5/PWM.c ****     *
 683:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 684:Generated_Source\PSoC5/PWM.c ****     void PWM_SetInterruptMode(uint8 interruptMode) 
 685:Generated_Source\PSoC5/PWM.c ****     {
 166              		.loc 1 685 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              		@ link register save eliminated.
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 16


 171              	.LVL3:
 686:Generated_Source\PSoC5/PWM.c ****         CY_SET_REG8(PWM_STATUS_MASK_PTR, interruptMode);
 172              		.loc 1 686 0
 173 0000 014B     		ldr	r3, .L16
 174 0002 1870     		strb	r0, [r3]
 175 0004 7047     		bx	lr
 176              	.L17:
 177 0006 00BF     		.align	2
 178              	.L16:
 179 0008 8D640040 		.word	1073767565
 180              		.cfi_endproc
 181              	.LFE9:
 182              		.size	PWM_SetInterruptMode, .-PWM_SetInterruptMode
 183              		.section	.text.PWM_ReadStatusRegister,"ax",%progbits
 184              		.align	2
 185              		.global	PWM_ReadStatusRegister
 186              		.thumb
 187              		.thumb_func
 188              		.type	PWM_ReadStatusRegister, %function
 189              	PWM_ReadStatusRegister:
 190              	.LFB10:
 687:Generated_Source\PSoC5/PWM.c ****     }
 688:Generated_Source\PSoC5/PWM.c **** 
 689:Generated_Source\PSoC5/PWM.c **** 
 690:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 691:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadStatusRegister
 692:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 693:Generated_Source\PSoC5/PWM.c ****     *
 694:Generated_Source\PSoC5/PWM.c ****     * Summary:
 695:Generated_Source\PSoC5/PWM.c ****     *  This function returns the current state of the status register.
 696:Generated_Source\PSoC5/PWM.c ****     *
 697:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 698:Generated_Source\PSoC5/PWM.c ****     *  None
 699:Generated_Source\PSoC5/PWM.c ****     *
 700:Generated_Source\PSoC5/PWM.c ****     * Return:
 701:Generated_Source\PSoC5/PWM.c ****     *  uint8 : Current status register value. The status register bits are:
 702:Generated_Source\PSoC5/PWM.c ****     *  [7:6] : Unused(0)
 703:Generated_Source\PSoC5/PWM.c ****     *  [5]   : Kill event output
 704:Generated_Source\PSoC5/PWM.c ****     *  [4]   : FIFO not empty
 705:Generated_Source\PSoC5/PWM.c ****     *  [3]   : FIFO full
 706:Generated_Source\PSoC5/PWM.c ****     *  [2]   : Terminal count
 707:Generated_Source\PSoC5/PWM.c ****     *  [1]   : Compare output 2
 708:Generated_Source\PSoC5/PWM.c ****     *  [0]   : Compare output 1
 709:Generated_Source\PSoC5/PWM.c ****     *
 710:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 711:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadStatusRegister(void) 
 712:Generated_Source\PSoC5/PWM.c ****     {
 191              		.loc 1 712 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 713:Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_STATUS_PTR));
 196              		.loc 1 713 0
 197 0000 014B     		ldr	r3, .L19
 198 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 714:Generated_Source\PSoC5/PWM.c ****     }
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 17


 199              		.loc 1 714 0
 200 0004 7047     		bx	lr
 201              	.L20:
 202 0006 00BF     		.align	2
 203              	.L19:
 204 0008 6D640040 		.word	1073767533
 205              		.cfi_endproc
 206              	.LFE10:
 207              		.size	PWM_ReadStatusRegister, .-PWM_ReadStatusRegister
 208              		.section	.text.PWM_ReadCapture,"ax",%progbits
 209              		.align	2
 210              		.global	PWM_ReadCapture
 211              		.thumb
 212              		.thumb_func
 213              		.type	PWM_ReadCapture, %function
 214              	PWM_ReadCapture:
 215              	.LFB11:
 715:Generated_Source\PSoC5/PWM.c **** 
 716:Generated_Source\PSoC5/PWM.c **** #endif /* (PWM_UseStatus || PWM_UsingFixedFunction) */
 717:Generated_Source\PSoC5/PWM.c **** 
 718:Generated_Source\PSoC5/PWM.c **** 
 719:Generated_Source\PSoC5/PWM.c **** #if (PWM_UseControl)
 720:Generated_Source\PSoC5/PWM.c **** 
 721:Generated_Source\PSoC5/PWM.c **** 
 722:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 723:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadControlRegister
 724:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 725:Generated_Source\PSoC5/PWM.c ****     *
 726:Generated_Source\PSoC5/PWM.c ****     * Summary:
 727:Generated_Source\PSoC5/PWM.c ****     *  Returns the current state of the control register. This API is available
 728:Generated_Source\PSoC5/PWM.c ****     *  only if the control register is not removed.
 729:Generated_Source\PSoC5/PWM.c ****     *
 730:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 731:Generated_Source\PSoC5/PWM.c ****     *  None
 732:Generated_Source\PSoC5/PWM.c ****     *
 733:Generated_Source\PSoC5/PWM.c ****     * Return:
 734:Generated_Source\PSoC5/PWM.c ****     *  uint8 : Current control register value
 735:Generated_Source\PSoC5/PWM.c ****     *
 736:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 737:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadControlRegister(void) 
 738:Generated_Source\PSoC5/PWM.c ****     {
 739:Generated_Source\PSoC5/PWM.c ****         uint8 result;
 740:Generated_Source\PSoC5/PWM.c **** 
 741:Generated_Source\PSoC5/PWM.c ****         result = CY_GET_REG8(PWM_CONTROL_PTR);
 742:Generated_Source\PSoC5/PWM.c ****         return (result);
 743:Generated_Source\PSoC5/PWM.c ****     }
 744:Generated_Source\PSoC5/PWM.c **** 
 745:Generated_Source\PSoC5/PWM.c **** 
 746:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 747:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_WriteControlRegister
 748:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 749:Generated_Source\PSoC5/PWM.c ****     *
 750:Generated_Source\PSoC5/PWM.c ****     * Summary:
 751:Generated_Source\PSoC5/PWM.c ****     *  Sets the bit field of the control register. This API is available only if
 752:Generated_Source\PSoC5/PWM.c ****     *  the control register is not removed.
 753:Generated_Source\PSoC5/PWM.c ****     *
 754:Generated_Source\PSoC5/PWM.c ****     * Parameters:
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 18


 755:Generated_Source\PSoC5/PWM.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:Generated_Source\PSoC5/PWM.c ****     *  [7]   : PWM Enable
 757:Generated_Source\PSoC5/PWM.c ****     *  [6]   : Reset
 758:Generated_Source\PSoC5/PWM.c ****     *  [5:3] : Compare Mode2
 759:Generated_Source\PSoC5/PWM.c ****     *  [2:0] : Compare Mode2
 760:Generated_Source\PSoC5/PWM.c ****     *
 761:Generated_Source\PSoC5/PWM.c ****     * Return:
 762:Generated_Source\PSoC5/PWM.c ****     *  None
 763:Generated_Source\PSoC5/PWM.c ****     *
 764:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 765:Generated_Source\PSoC5/PWM.c ****     void PWM_WriteControlRegister(uint8 control) 
 766:Generated_Source\PSoC5/PWM.c ****     {
 767:Generated_Source\PSoC5/PWM.c ****         CY_SET_REG8(PWM_CONTROL_PTR, control);
 768:Generated_Source\PSoC5/PWM.c ****     }
 769:Generated_Source\PSoC5/PWM.c **** 
 770:Generated_Source\PSoC5/PWM.c **** #endif /* (PWM_UseControl) */
 771:Generated_Source\PSoC5/PWM.c **** 
 772:Generated_Source\PSoC5/PWM.c **** 
 773:Generated_Source\PSoC5/PWM.c **** #if (!PWM_UsingFixedFunction)
 774:Generated_Source\PSoC5/PWM.c **** 
 775:Generated_Source\PSoC5/PWM.c **** 
 776:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 777:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCapture
 778:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 779:Generated_Source\PSoC5/PWM.c ****     *
 780:Generated_Source\PSoC5/PWM.c ****     * Summary:
 781:Generated_Source\PSoC5/PWM.c ****     *  Reads the capture value from the capture FIFO.
 782:Generated_Source\PSoC5/PWM.c ****     *
 783:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 784:Generated_Source\PSoC5/PWM.c ****     *  None
 785:Generated_Source\PSoC5/PWM.c ****     *
 786:Generated_Source\PSoC5/PWM.c ****     * Return:
 787:Generated_Source\PSoC5/PWM.c ****     *  uint8/uint16: The current capture value
 788:Generated_Source\PSoC5/PWM.c ****     *
 789:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 790:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadCapture(void) 
 791:Generated_Source\PSoC5/PWM.c ****     {
 216              		.loc 1 791 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              		@ link register save eliminated.
 792:Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_CAPTURE_LSB_PTR));
 221              		.loc 1 792 0
 222 0000 014B     		ldr	r3, .L22
 223 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 793:Generated_Source\PSoC5/PWM.c ****     }
 224              		.loc 1 793 0
 225 0004 7047     		bx	lr
 226              	.L23:
 227 0006 00BF     		.align	2
 228              	.L22:
 229 0008 5D640040 		.word	1073767517
 230              		.cfi_endproc
 231              	.LFE11:
 232              		.size	PWM_ReadCapture, .-PWM_ReadCapture
 233              		.section	.text.PWM_ClearFIFO,"ax",%progbits
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 19


 234              		.align	2
 235              		.global	PWM_ClearFIFO
 236              		.thumb
 237              		.thumb_func
 238              		.type	PWM_ClearFIFO, %function
 239              	PWM_ClearFIFO:
 240              	.LFB6:
 454:Generated_Source\PSoC5/PWM.c ****             while(0u != (PWM_ReadStatusRegister() & PWM_STATUS_FIFONEMPTY))
 241              		.loc 1 454 0
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 0
 244              		@ frame_needed = 0, uses_anonymous_args = 0
 245 0000 08B5     		push	{r3, lr}
 246              		.cfi_def_cfa_offset 8
 247              		.cfi_offset 3, -8
 248              		.cfi_offset 14, -4
 455:Generated_Source\PSoC5/PWM.c ****             {
 249              		.loc 1 455 0
 250 0002 01E0     		b	.L25
 251              	.L26:
 457:Generated_Source\PSoC5/PWM.c ****             }
 252              		.loc 1 457 0
 253 0004 FFF7FEFF 		bl	PWM_ReadCapture
 254              	.LVL4:
 255              	.L25:
 455:Generated_Source\PSoC5/PWM.c ****             {
 256              		.loc 1 455 0
 257 0008 FFF7FEFF 		bl	PWM_ReadStatusRegister
 258              	.LVL5:
 259 000c 10F0100F 		tst	r0, #16
 260 0010 F8D1     		bne	.L26
 459:Generated_Source\PSoC5/PWM.c **** 
 261              		.loc 1 459 0
 262 0012 08BD     		pop	{r3, pc}
 263              		.cfi_endproc
 264              	.LFE6:
 265              		.size	PWM_ClearFIFO, .-PWM_ClearFIFO
 266              		.section	.text.PWM_Init,"ax",%progbits
 267              		.align	2
 268              		.global	PWM_Init
 269              		.thumb
 270              		.thumb_func
 271              		.type	PWM_Init, %function
 272              	PWM_Init:
 273              	.LFB1:
  85:Generated_Source\PSoC5/PWM.c ****     #if (PWM_UsingFixedFunction || PWM_UseControl)
 274              		.loc 1 85 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278 0000 10B5     		push	{r4, lr}
 279              		.cfi_def_cfa_offset 8
 280              		.cfi_offset 4, -8
 281              		.cfi_offset 14, -4
 126:Generated_Source\PSoC5/PWM.c ****         #else /* (PWM_Resolution == 16)*/
 282              		.loc 1 126 0
 283 0002 0E4C     		ldr	r4, .L30
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 20


 284 0004 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 285 0006 43F00103 		orr	r3, r3, #1
 286 000a 2370     		strb	r3, [r4]
 133:Generated_Source\PSoC5/PWM.c ****     #endif /* (!PWM_UsingFixedFunction) */
 287              		.loc 1 133 0
 288 000c 6420     		movs	r0, #100
 289 000e FFF7FEFF 		bl	PWM_WriteCounter
 290              	.LVL6:
 136:Generated_Source\PSoC5/PWM.c **** 
 291              		.loc 1 136 0
 292 0012 6420     		movs	r0, #100
 293 0014 FFF7FEFF 		bl	PWM_WritePeriod
 294              	.LVL7:
 139:Generated_Source\PSoC5/PWM.c ****         #else
 295              		.loc 1 139 0
 296 0018 5020     		movs	r0, #80
 297 001a FFF7FEFF 		bl	PWM_WriteCompare
 298              	.LVL8:
 154:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UseStatus || PWM_UsingFixedFunction) */
 299              		.loc 1 154 0
 300 001e 0020     		movs	r0, #0
 301 0020 FFF7FEFF 		bl	PWM_SetInterruptMode
 302              	.LVL9:
 167:Generated_Source\PSoC5/PWM.c ****             /* Use the interrupt output of the status register for IRQ output */
 303              		.loc 1 167 0
 304 0024 FFF7FEFF 		bl	CyEnterCriticalSection
 305              	.LVL10:
 169:Generated_Source\PSoC5/PWM.c **** 
 306              		.loc 1 169 0
 307 0028 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 308 002a 43F01003 		orr	r3, r3, #16
 309 002e 2370     		strb	r3, [r4]
 172:Generated_Source\PSoC5/PWM.c **** 
 310              		.loc 1 172 0
 311 0030 FFF7FEFF 		bl	CyExitCriticalSection
 312              	.LVL11:
 176:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UseStatus) */
 313              		.loc 1 176 0
 314 0034 FFF7FEFF 		bl	PWM_ClearFIFO
 315              	.LVL12:
 316 0038 10BD     		pop	{r4, pc}
 317              	.L31:
 318 003a 00BF     		.align	2
 319              	.L30:
 320 003c 9D640040 		.word	1073767581
 321              		.cfi_endproc
 322              	.LFE1:
 323              		.size	PWM_Init, .-PWM_Init
 324              		.section	.text.PWM_Start,"ax",%progbits
 325              		.align	2
 326              		.global	PWM_Start
 327              		.thumb
 328              		.thumb_func
 329              		.type	PWM_Start, %function
 330              	PWM_Start:
 331              	.LFB0:
  56:Generated_Source\PSoC5/PWM.c ****     /* If not Initialized then initialize all required hardware and software */
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 21


 332              		.loc 1 56 0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336 0000 08B5     		push	{r3, lr}
 337              		.cfi_def_cfa_offset 8
 338              		.cfi_offset 3, -8
 339              		.cfi_offset 14, -4
  58:Generated_Source\PSoC5/PWM.c ****     {
 340              		.loc 1 58 0
 341 0002 044B     		ldr	r3, .L35
 342 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 343 0006 23B9     		cbnz	r3, .L32
  60:Generated_Source\PSoC5/PWM.c ****         PWM_initVar = 1u;
 344              		.loc 1 60 0
 345 0008 FFF7FEFF 		bl	PWM_Init
 346              	.LVL13:
  61:Generated_Source\PSoC5/PWM.c ****     }
 347              		.loc 1 61 0
 348 000c 0122     		movs	r2, #1
 349 000e 014B     		ldr	r3, .L35
 350 0010 1A70     		strb	r2, [r3]
 351              	.L32:
 352 0012 08BD     		pop	{r3, pc}
 353              	.L36:
 354              		.align	2
 355              	.L35:
 356 0014 00000000 		.word	.LANCHOR0
 357              		.cfi_endproc
 358              	.LFE0:
 359              		.size	PWM_Start, .-PWM_Start
 360              		.section	.text.PWM_ReadCompare,"ax",%progbits
 361              		.align	2
 362              		.global	PWM_ReadCompare
 363              		.thumb
 364              		.thumb_func
 365              		.type	PWM_ReadCompare, %function
 366              	PWM_ReadCompare:
 367              	.LFB12:
 794:Generated_Source\PSoC5/PWM.c **** 
 795:Generated_Source\PSoC5/PWM.c **** #endif /* (!PWM_UsingFixedFunction) */
 796:Generated_Source\PSoC5/PWM.c **** 
 797:Generated_Source\PSoC5/PWM.c **** 
 798:Generated_Source\PSoC5/PWM.c **** #if (PWM_UseOneCompareMode)
 799:Generated_Source\PSoC5/PWM.c **** 
 800:Generated_Source\PSoC5/PWM.c **** 
 801:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 802:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCompare
 803:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 804:Generated_Source\PSoC5/PWM.c ****     *
 805:Generated_Source\PSoC5/PWM.c ****     * Summary:
 806:Generated_Source\PSoC5/PWM.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:Generated_Source\PSoC5/PWM.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:Generated_Source\PSoC5/PWM.c ****     *
 809:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 810:Generated_Source\PSoC5/PWM.c ****     *  None
 811:Generated_Source\PSoC5/PWM.c ****     *
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 22


 812:Generated_Source\PSoC5/PWM.c ****     * Return:
 813:Generated_Source\PSoC5/PWM.c ****     *  uint8/uint16: Current compare value
 814:Generated_Source\PSoC5/PWM.c ****     *
 815:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 816:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadCompare(void) 
 817:Generated_Source\PSoC5/PWM.c ****     {
 368              		.loc 1 817 0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372              		@ link register save eliminated.
 818:Generated_Source\PSoC5/PWM.c ****         #if(PWM_UsingFixedFunction)
 819:Generated_Source\PSoC5/PWM.c ****             return ((uint8)CY_GET_REG16(PWM_COMPARE1_LSB_PTR));
 820:Generated_Source\PSoC5/PWM.c ****         #else
 821:Generated_Source\PSoC5/PWM.c ****             return (CY_GET_REG8(PWM_COMPARE1_LSB_PTR));
 373              		.loc 1 821 0
 374 0000 014B     		ldr	r3, .L38
 375 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 822:Generated_Source\PSoC5/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 823:Generated_Source\PSoC5/PWM.c ****     }
 376              		.loc 1 823 0
 377 0004 7047     		bx	lr
 378              	.L39:
 379 0006 00BF     		.align	2
 380              	.L38:
 381 0008 2D640040 		.word	1073767469
 382              		.cfi_endproc
 383              	.LFE12:
 384              		.size	PWM_ReadCompare, .-PWM_ReadCompare
 385              		.section	.text.PWM_ReadPeriod,"ax",%progbits
 386              		.align	2
 387              		.global	PWM_ReadPeriod
 388              		.thumb
 389              		.thumb_func
 390              		.type	PWM_ReadPeriod, %function
 391              	PWM_ReadPeriod:
 392              	.LFB13:
 824:Generated_Source\PSoC5/PWM.c **** 
 825:Generated_Source\PSoC5/PWM.c **** #else
 826:Generated_Source\PSoC5/PWM.c **** 
 827:Generated_Source\PSoC5/PWM.c **** 
 828:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 829:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCompare1
 830:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 831:Generated_Source\PSoC5/PWM.c ****     *
 832:Generated_Source\PSoC5/PWM.c ****     * Summary:
 833:Generated_Source\PSoC5/PWM.c ****     *  Reads the compare value for the compare1 output.
 834:Generated_Source\PSoC5/PWM.c ****     *
 835:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 836:Generated_Source\PSoC5/PWM.c ****     *  None
 837:Generated_Source\PSoC5/PWM.c ****     *
 838:Generated_Source\PSoC5/PWM.c ****     * Return:
 839:Generated_Source\PSoC5/PWM.c ****     *  uint8/uint16: Current compare value.
 840:Generated_Source\PSoC5/PWM.c ****     *
 841:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 842:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadCompare1(void) 
 843:Generated_Source\PSoC5/PWM.c ****     {
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 23


 844:Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_COMPARE1_LSB_PTR));
 845:Generated_Source\PSoC5/PWM.c ****     }
 846:Generated_Source\PSoC5/PWM.c **** 
 847:Generated_Source\PSoC5/PWM.c **** 
 848:Generated_Source\PSoC5/PWM.c ****     /*******************************************************************************
 849:Generated_Source\PSoC5/PWM.c ****     * Function Name: PWM_ReadCompare2
 850:Generated_Source\PSoC5/PWM.c ****     ********************************************************************************
 851:Generated_Source\PSoC5/PWM.c ****     *
 852:Generated_Source\PSoC5/PWM.c ****     * Summary:
 853:Generated_Source\PSoC5/PWM.c ****     *  Reads the compare value for the compare2 output.
 854:Generated_Source\PSoC5/PWM.c ****     *
 855:Generated_Source\PSoC5/PWM.c ****     * Parameters:
 856:Generated_Source\PSoC5/PWM.c ****     *  None
 857:Generated_Source\PSoC5/PWM.c ****     *
 858:Generated_Source\PSoC5/PWM.c ****     * Return:
 859:Generated_Source\PSoC5/PWM.c ****     *  uint8/uint16: Current compare value.
 860:Generated_Source\PSoC5/PWM.c ****     *
 861:Generated_Source\PSoC5/PWM.c ****     *******************************************************************************/
 862:Generated_Source\PSoC5/PWM.c ****     uint8 PWM_ReadCompare2(void) 
 863:Generated_Source\PSoC5/PWM.c ****     {
 864:Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_COMPARE2_LSB_PTR));
 865:Generated_Source\PSoC5/PWM.c ****     }
 866:Generated_Source\PSoC5/PWM.c **** 
 867:Generated_Source\PSoC5/PWM.c **** #endif /* (PWM_UseOneCompareMode) */
 868:Generated_Source\PSoC5/PWM.c **** 
 869:Generated_Source\PSoC5/PWM.c **** 
 870:Generated_Source\PSoC5/PWM.c **** /*******************************************************************************
 871:Generated_Source\PSoC5/PWM.c **** * Function Name: PWM_ReadPeriod
 872:Generated_Source\PSoC5/PWM.c **** ********************************************************************************
 873:Generated_Source\PSoC5/PWM.c **** *
 874:Generated_Source\PSoC5/PWM.c **** * Summary:
 875:Generated_Source\PSoC5/PWM.c **** *  Reads the period value used by the PWM hardware.
 876:Generated_Source\PSoC5/PWM.c **** *
 877:Generated_Source\PSoC5/PWM.c **** * Parameters:
 878:Generated_Source\PSoC5/PWM.c **** *  None
 879:Generated_Source\PSoC5/PWM.c **** *
 880:Generated_Source\PSoC5/PWM.c **** * Return:
 881:Generated_Source\PSoC5/PWM.c **** *  uint8/16: Period value
 882:Generated_Source\PSoC5/PWM.c **** *
 883:Generated_Source\PSoC5/PWM.c **** *******************************************************************************/
 884:Generated_Source\PSoC5/PWM.c **** uint8 PWM_ReadPeriod(void) 
 885:Generated_Source\PSoC5/PWM.c **** {
 393              		.loc 1 885 0
 394              		.cfi_startproc
 395              		@ args = 0, pretend = 0, frame = 0
 396              		@ frame_needed = 0, uses_anonymous_args = 0
 397              		@ link register save eliminated.
 886:Generated_Source\PSoC5/PWM.c ****     #if(PWM_UsingFixedFunction)
 887:Generated_Source\PSoC5/PWM.c ****         return ((uint8)CY_GET_REG16(PWM_PERIOD_LSB_PTR));
 888:Generated_Source\PSoC5/PWM.c ****     #else
 889:Generated_Source\PSoC5/PWM.c ****         return (CY_GET_REG8(PWM_PERIOD_LSB_PTR));
 398              		.loc 1 889 0
 399 0000 014B     		ldr	r3, .L41
 400 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 890:Generated_Source\PSoC5/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 891:Generated_Source\PSoC5/PWM.c **** }
 401              		.loc 1 891 0
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 24


 402 0004 7047     		bx	lr
 403              	.L42:
 404 0006 00BF     		.align	2
 405              	.L41:
 406 0008 4D640040 		.word	1073767501
 407              		.cfi_endproc
 408              	.LFE13:
 409              		.size	PWM_ReadPeriod, .-PWM_ReadPeriod
 410              		.global	PWM_initVar
 411              		.bss
 412              		.set	.LANCHOR0,. + 0
 413              		.type	PWM_initVar, %object
 414              		.size	PWM_initVar, 1
 415              	PWM_initVar:
 416 0000 00       		.space	1
 417              		.text
 418              	.Letext0:
 419              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 420              		.file 3 "Generated_Source\\PSoC5\\CyLib.h"
 421              		.section	.debug_info,"",%progbits
 422              	.Ldebug_info0:
 423 0000 CA020000 		.4byte	0x2ca
 424 0004 0400     		.2byte	0x4
 425 0006 00000000 		.4byte	.Ldebug_abbrev0
 426 000a 04       		.byte	0x4
 427 000b 01       		.uleb128 0x1
 428 000c D9000000 		.4byte	.LASF36
 429 0010 0C       		.byte	0xc
 430 0011 DB020000 		.4byte	.LASF37
 431 0015 2F000000 		.4byte	.LASF38
 432 0019 00000000 		.4byte	.Ldebug_ranges0+0
 433 001d 00000000 		.4byte	0
 434 0021 00000000 		.4byte	.Ldebug_line0
 435 0025 02       		.uleb128 0x2
 436 0026 01       		.byte	0x1
 437 0027 06       		.byte	0x6
 438 0028 A5020000 		.4byte	.LASF0
 439 002c 02       		.uleb128 0x2
 440 002d 01       		.byte	0x1
 441 002e 08       		.byte	0x8
 442 002f CB000000 		.4byte	.LASF1
 443 0033 02       		.uleb128 0x2
 444 0034 02       		.byte	0x2
 445 0035 05       		.byte	0x5
 446 0036 67020000 		.4byte	.LASF2
 447 003a 02       		.uleb128 0x2
 448 003b 02       		.byte	0x2
 449 003c 07       		.byte	0x7
 450 003d 83000000 		.4byte	.LASF3
 451 0041 02       		.uleb128 0x2
 452 0042 04       		.byte	0x4
 453 0043 05       		.byte	0x5
 454 0044 8B020000 		.4byte	.LASF4
 455 0048 02       		.uleb128 0x2
 456 0049 04       		.byte	0x4
 457 004a 07       		.byte	0x7
 458 004b 6C010000 		.4byte	.LASF5
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 25


 459 004f 02       		.uleb128 0x2
 460 0050 08       		.byte	0x8
 461 0051 05       		.byte	0x5
 462 0052 29020000 		.4byte	.LASF6
 463 0056 02       		.uleb128 0x2
 464 0057 08       		.byte	0x8
 465 0058 07       		.byte	0x7
 466 0059 B4000000 		.4byte	.LASF7
 467 005d 03       		.uleb128 0x3
 468 005e 04       		.byte	0x4
 469 005f 05       		.byte	0x5
 470 0060 696E7400 		.ascii	"int\000"
 471 0064 02       		.uleb128 0x2
 472 0065 04       		.byte	0x4
 473 0066 07       		.byte	0x7
 474 0067 D8010000 		.4byte	.LASF8
 475 006b 04       		.uleb128 0x4
 476 006c 8E010000 		.4byte	.LASF12
 477 0070 02       		.byte	0x2
 478 0071 E401     		.2byte	0x1e4
 479 0073 2C000000 		.4byte	0x2c
 480 0077 02       		.uleb128 0x2
 481 0078 04       		.byte	0x4
 482 0079 04       		.byte	0x4
 483 007a A6000000 		.4byte	.LASF9
 484 007e 02       		.uleb128 0x2
 485 007f 08       		.byte	0x8
 486 0080 04       		.byte	0x4
 487 0081 94010000 		.4byte	.LASF10
 488 0085 02       		.uleb128 0x2
 489 0086 01       		.byte	0x1
 490 0087 08       		.byte	0x8
 491 0088 94020000 		.4byte	.LASF11
 492 008c 04       		.uleb128 0x4
 493 008d 67010000 		.4byte	.LASF13
 494 0091 02       		.byte	0x2
 495 0092 8E02     		.2byte	0x28e
 496 0094 98000000 		.4byte	0x98
 497 0098 05       		.uleb128 0x5
 498 0099 6B000000 		.4byte	0x6b
 499 009d 02       		.uleb128 0x2
 500 009e 08       		.byte	0x8
 501 009f 04       		.byte	0x4
 502 00a0 99020000 		.4byte	.LASF14
 503 00a4 02       		.uleb128 0x2
 504 00a5 04       		.byte	0x4
 505 00a6 07       		.byte	0x7
 506 00a7 20020000 		.4byte	.LASF15
 507 00ab 06       		.uleb128 0x6
 508 00ac B9020000 		.4byte	.LASF16
 509 00b0 01       		.byte	0x1
 510 00b1 C7       		.byte	0xc7
 511 00b2 00000000 		.4byte	.LFB2
 512 00b6 02000000 		.4byte	.LFE2-.LFB2
 513 00ba 01       		.uleb128 0x1
 514 00bb 9C       		.byte	0x9c
 515 00bc 06       		.uleb128 0x6
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 26


 516 00bd 82020000 		.4byte	.LASF17
 517 00c1 01       		.byte	0x1
 518 00c2 E9       		.byte	0xe9
 519 00c3 00000000 		.4byte	.LFB3
 520 00c7 02000000 		.4byte	.LFE3-.LFB3
 521 00cb 01       		.uleb128 0x1
 522 00cc 9C       		.byte	0x9c
 523 00cd 07       		.uleb128 0x7
 524 00ce 71020000 		.4byte	.LASF18
 525 00d2 01       		.byte	0x1
 526 00d3 9301     		.2byte	0x193
 527 00d5 00000000 		.4byte	.LFB4
 528 00d9 0C000000 		.4byte	.LFE4-.LFB4
 529 00dd 01       		.uleb128 0x1
 530 00de 9C       		.byte	0x9c
 531 00df F2000000 		.4byte	0xf2
 532 00e3 08       		.uleb128 0x8
 533 00e4 AC000000 		.4byte	.LASF20
 534 00e8 01       		.byte	0x1
 535 00e9 9301     		.2byte	0x193
 536 00eb 6B000000 		.4byte	0x6b
 537 00ef 01       		.uleb128 0x1
 538 00f0 50       		.byte	0x50
 539 00f1 00       		.byte	0
 540 00f2 09       		.uleb128 0x9
 541 00f3 7E010000 		.4byte	.LASF26
 542 00f7 01       		.byte	0x1
 543 00f8 A901     		.2byte	0x1a9
 544 00fa 6B000000 		.4byte	0x6b
 545 00fe 00000000 		.4byte	.LFB5
 546 0102 14000000 		.4byte	.LFE5-.LFB5
 547 0106 01       		.uleb128 0x1
 548 0107 9C       		.byte	0x9c
 549 0108 07       		.uleb128 0x7
 550 0109 FB010000 		.4byte	.LASF19
 551 010d 01       		.byte	0x1
 552 010e E201     		.2byte	0x1e2
 553 0110 00000000 		.4byte	.LFB7
 554 0114 0C000000 		.4byte	.LFE7-.LFB7
 555 0118 01       		.uleb128 0x1
 556 0119 9C       		.byte	0x9c
 557 011a 2D010000 		.4byte	0x12d
 558 011e 08       		.uleb128 0x8
 559 011f 1E000000 		.4byte	.LASF21
 560 0123 01       		.byte	0x1
 561 0124 E201     		.2byte	0x1e2
 562 0126 6B000000 		.4byte	0x6b
 563 012a 01       		.uleb128 0x1
 564 012b 50       		.byte	0x50
 565 012c 00       		.byte	0
 566 012d 07       		.uleb128 0x7
 567 012e 9B010000 		.4byte	.LASF22
 568 0132 01       		.byte	0x1
 569 0133 0402     		.2byte	0x204
 570 0135 00000000 		.4byte	.LFB8
 571 0139 0C000000 		.4byte	.LFE8-.LFB8
 572 013d 01       		.uleb128 0x1
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 27


 573 013e 9C       		.byte	0x9c
 574 013f 52010000 		.4byte	0x152
 575 0143 08       		.uleb128 0x8
 576 0144 B1020000 		.4byte	.LASF23
 577 0148 01       		.byte	0x1
 578 0149 0402     		.2byte	0x204
 579 014b 6B000000 		.4byte	0x6b
 580 014f 01       		.uleb128 0x1
 581 0150 50       		.byte	0x50
 582 0151 00       		.byte	0
 583 0152 07       		.uleb128 0x7
 584 0153 0B020000 		.4byte	.LASF24
 585 0157 01       		.byte	0x1
 586 0158 AC02     		.2byte	0x2ac
 587 015a 00000000 		.4byte	.LFB9
 588 015e 0C000000 		.4byte	.LFE9-.LFB9
 589 0162 01       		.uleb128 0x1
 590 0163 9C       		.byte	0x9c
 591 0164 77010000 		.4byte	0x177
 592 0168 08       		.uleb128 0x8
 593 0169 37020000 		.4byte	.LASF25
 594 016d 01       		.byte	0x1
 595 016e AC02     		.2byte	0x2ac
 596 0170 6B000000 		.4byte	0x6b
 597 0174 01       		.uleb128 0x1
 598 0175 50       		.byte	0x50
 599 0176 00       		.byte	0
 600 0177 09       		.uleb128 0x9
 601 0178 C4020000 		.4byte	.LASF27
 602 017c 01       		.byte	0x1
 603 017d C702     		.2byte	0x2c7
 604 017f 6B000000 		.4byte	0x6b
 605 0183 00000000 		.4byte	.LFB10
 606 0187 0C000000 		.4byte	.LFE10-.LFB10
 607 018b 01       		.uleb128 0x1
 608 018c 9C       		.byte	0x9c
 609 018d 09       		.uleb128 0x9
 610 018e 96000000 		.4byte	.LASF28
 611 0192 01       		.byte	0x1
 612 0193 1603     		.2byte	0x316
 613 0195 6B000000 		.4byte	0x6b
 614 0199 00000000 		.4byte	.LFB11
 615 019d 0C000000 		.4byte	.LFE11-.LFB11
 616 01a1 01       		.uleb128 0x1
 617 01a2 9C       		.byte	0x9c
 618 01a3 07       		.uleb128 0x7
 619 01a4 10000000 		.4byte	.LASF29
 620 01a8 01       		.byte	0x1
 621 01a9 C501     		.2byte	0x1c5
 622 01ab 00000000 		.4byte	.LFB6
 623 01af 14000000 		.4byte	.LFE6-.LFB6
 624 01b3 01       		.uleb128 0x1
 625 01b4 9C       		.byte	0x9c
 626 01b5 CC010000 		.4byte	0x1cc
 627 01b9 0A       		.uleb128 0xa
 628 01ba 08000000 		.4byte	.LVL4
 629 01be 8D010000 		.4byte	0x18d
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 28


 630 01c2 0A       		.uleb128 0xa
 631 01c3 0C000000 		.4byte	.LVL5
 632 01c7 77010000 		.4byte	0x177
 633 01cb 00       		.byte	0
 634 01cc 0B       		.uleb128 0xb
 635 01cd AC010000 		.4byte	.LASF30
 636 01d1 01       		.byte	0x1
 637 01d2 54       		.byte	0x54
 638 01d3 00000000 		.4byte	.LFB1
 639 01d7 40000000 		.4byte	.LFE1-.LFB1
 640 01db 01       		.uleb128 0x1
 641 01dc 9C       		.byte	0x9c
 642 01dd 5B020000 		.4byte	0x25b
 643 01e1 0C       		.uleb128 0xc
 644 01e2 45020000 		.4byte	.LASF39
 645 01e6 01       		.byte	0x1
 646 01e7 5D       		.byte	0x5d
 647 01e8 6B000000 		.4byte	0x6b
 648 01ec 00000000 		.4byte	.LLST0
 649 01f0 0D       		.uleb128 0xd
 650 01f1 12000000 		.4byte	.LVL6
 651 01f5 CD000000 		.4byte	0xcd
 652 01f9 04020000 		.4byte	0x204
 653 01fd 0E       		.uleb128 0xe
 654 01fe 01       		.uleb128 0x1
 655 01ff 50       		.byte	0x50
 656 0200 02       		.uleb128 0x2
 657 0201 08       		.byte	0x8
 658 0202 64       		.byte	0x64
 659 0203 00       		.byte	0
 660 0204 0D       		.uleb128 0xd
 661 0205 18000000 		.4byte	.LVL7
 662 0209 08010000 		.4byte	0x108
 663 020d 18020000 		.4byte	0x218
 664 0211 0E       		.uleb128 0xe
 665 0212 01       		.uleb128 0x1
 666 0213 50       		.byte	0x50
 667 0214 02       		.uleb128 0x2
 668 0215 08       		.byte	0x8
 669 0216 64       		.byte	0x64
 670 0217 00       		.byte	0
 671 0218 0D       		.uleb128 0xd
 672 0219 1E000000 		.4byte	.LVL8
 673 021d 2D010000 		.4byte	0x12d
 674 0221 2C020000 		.4byte	0x22c
 675 0225 0E       		.uleb128 0xe
 676 0226 01       		.uleb128 0x1
 677 0227 50       		.byte	0x50
 678 0228 02       		.uleb128 0x2
 679 0229 08       		.byte	0x8
 680 022a 50       		.byte	0x50
 681 022b 00       		.byte	0
 682 022c 0D       		.uleb128 0xd
 683 022d 24000000 		.4byte	.LVL9
 684 0231 52010000 		.4byte	0x152
 685 0235 3F020000 		.4byte	0x23f
 686 0239 0E       		.uleb128 0xe
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 29


 687 023a 01       		.uleb128 0x1
 688 023b 50       		.byte	0x50
 689 023c 01       		.uleb128 0x1
 690 023d 30       		.byte	0x30
 691 023e 00       		.byte	0
 692 023f 0A       		.uleb128 0xa
 693 0240 28000000 		.4byte	.LVL10
 694 0244 B7020000 		.4byte	0x2b7
 695 0248 0A       		.uleb128 0xa
 696 0249 34000000 		.4byte	.LVL11
 697 024d C2020000 		.4byte	0x2c2
 698 0251 0A       		.uleb128 0xa
 699 0252 38000000 		.4byte	.LVL12
 700 0256 A3010000 		.4byte	0x1a3
 701 025a 00       		.byte	0
 702 025b 0B       		.uleb128 0xb
 703 025c 25000000 		.4byte	.LASF31
 704 0260 01       		.byte	0x1
 705 0261 37       		.byte	0x37
 706 0262 00000000 		.4byte	.LFB0
 707 0266 18000000 		.4byte	.LFE0-.LFB0
 708 026a 01       		.uleb128 0x1
 709 026b 9C       		.byte	0x9c
 710 026c 7A020000 		.4byte	0x27a
 711 0270 0A       		.uleb128 0xa
 712 0271 0C000000 		.4byte	.LVL13
 713 0275 CC010000 		.4byte	0x1cc
 714 0279 00       		.byte	0
 715 027a 09       		.uleb128 0x9
 716 027b 00000000 		.4byte	.LASF32
 717 027f 01       		.byte	0x1
 718 0280 3003     		.2byte	0x330
 719 0282 6B000000 		.4byte	0x6b
 720 0286 00000000 		.4byte	.LFB12
 721 028a 0C000000 		.4byte	.LFE12-.LFB12
 722 028e 01       		.uleb128 0x1
 723 028f 9C       		.byte	0x9c
 724 0290 09       		.uleb128 0x9
 725 0291 58020000 		.4byte	.LASF33
 726 0295 01       		.byte	0x1
 727 0296 7403     		.2byte	0x374
 728 0298 6B000000 		.4byte	0x6b
 729 029c 00000000 		.4byte	.LFB13
 730 02a0 0C000000 		.4byte	.LFE13-.LFB13
 731 02a4 01       		.uleb128 0x1
 732 02a5 9C       		.byte	0x9c
 733 02a6 0F       		.uleb128 0xf
 734 02a7 B5010000 		.4byte	.LASF40
 735 02ab 01       		.byte	0x1
 736 02ac 20       		.byte	0x20
 737 02ad 6B000000 		.4byte	0x6b
 738 02b1 05       		.uleb128 0x5
 739 02b2 03       		.byte	0x3
 740 02b3 00000000 		.4byte	PWM_initVar
 741 02b7 10       		.uleb128 0x10
 742 02b8 C1010000 		.4byte	.LASF34
 743 02bc C1010000 		.4byte	.LASF34
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 30


 744 02c0 03       		.byte	0x3
 745 02c1 7D       		.byte	0x7d
 746 02c2 10       		.uleb128 0x10
 747 02c3 E5010000 		.4byte	.LASF35
 748 02c7 E5010000 		.4byte	.LASF35
 749 02cb 03       		.byte	0x3
 750 02cc 7E       		.byte	0x7e
 751 02cd 00       		.byte	0
 752              		.section	.debug_abbrev,"",%progbits
 753              	.Ldebug_abbrev0:
 754 0000 01       		.uleb128 0x1
 755 0001 11       		.uleb128 0x11
 756 0002 01       		.byte	0x1
 757 0003 25       		.uleb128 0x25
 758 0004 0E       		.uleb128 0xe
 759 0005 13       		.uleb128 0x13
 760 0006 0B       		.uleb128 0xb
 761 0007 03       		.uleb128 0x3
 762 0008 0E       		.uleb128 0xe
 763 0009 1B       		.uleb128 0x1b
 764 000a 0E       		.uleb128 0xe
 765 000b 55       		.uleb128 0x55
 766 000c 17       		.uleb128 0x17
 767 000d 11       		.uleb128 0x11
 768 000e 01       		.uleb128 0x1
 769 000f 10       		.uleb128 0x10
 770 0010 17       		.uleb128 0x17
 771 0011 00       		.byte	0
 772 0012 00       		.byte	0
 773 0013 02       		.uleb128 0x2
 774 0014 24       		.uleb128 0x24
 775 0015 00       		.byte	0
 776 0016 0B       		.uleb128 0xb
 777 0017 0B       		.uleb128 0xb
 778 0018 3E       		.uleb128 0x3e
 779 0019 0B       		.uleb128 0xb
 780 001a 03       		.uleb128 0x3
 781 001b 0E       		.uleb128 0xe
 782 001c 00       		.byte	0
 783 001d 00       		.byte	0
 784 001e 03       		.uleb128 0x3
 785 001f 24       		.uleb128 0x24
 786 0020 00       		.byte	0
 787 0021 0B       		.uleb128 0xb
 788 0022 0B       		.uleb128 0xb
 789 0023 3E       		.uleb128 0x3e
 790 0024 0B       		.uleb128 0xb
 791 0025 03       		.uleb128 0x3
 792 0026 08       		.uleb128 0x8
 793 0027 00       		.byte	0
 794 0028 00       		.byte	0
 795 0029 04       		.uleb128 0x4
 796 002a 16       		.uleb128 0x16
 797 002b 00       		.byte	0
 798 002c 03       		.uleb128 0x3
 799 002d 0E       		.uleb128 0xe
 800 002e 3A       		.uleb128 0x3a
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 31


 801 002f 0B       		.uleb128 0xb
 802 0030 3B       		.uleb128 0x3b
 803 0031 05       		.uleb128 0x5
 804 0032 49       		.uleb128 0x49
 805 0033 13       		.uleb128 0x13
 806 0034 00       		.byte	0
 807 0035 00       		.byte	0
 808 0036 05       		.uleb128 0x5
 809 0037 35       		.uleb128 0x35
 810 0038 00       		.byte	0
 811 0039 49       		.uleb128 0x49
 812 003a 13       		.uleb128 0x13
 813 003b 00       		.byte	0
 814 003c 00       		.byte	0
 815 003d 06       		.uleb128 0x6
 816 003e 2E       		.uleb128 0x2e
 817 003f 00       		.byte	0
 818 0040 3F       		.uleb128 0x3f
 819 0041 19       		.uleb128 0x19
 820 0042 03       		.uleb128 0x3
 821 0043 0E       		.uleb128 0xe
 822 0044 3A       		.uleb128 0x3a
 823 0045 0B       		.uleb128 0xb
 824 0046 3B       		.uleb128 0x3b
 825 0047 0B       		.uleb128 0xb
 826 0048 27       		.uleb128 0x27
 827 0049 19       		.uleb128 0x19
 828 004a 11       		.uleb128 0x11
 829 004b 01       		.uleb128 0x1
 830 004c 12       		.uleb128 0x12
 831 004d 06       		.uleb128 0x6
 832 004e 40       		.uleb128 0x40
 833 004f 18       		.uleb128 0x18
 834 0050 9742     		.uleb128 0x2117
 835 0052 19       		.uleb128 0x19
 836 0053 00       		.byte	0
 837 0054 00       		.byte	0
 838 0055 07       		.uleb128 0x7
 839 0056 2E       		.uleb128 0x2e
 840 0057 01       		.byte	0x1
 841 0058 3F       		.uleb128 0x3f
 842 0059 19       		.uleb128 0x19
 843 005a 03       		.uleb128 0x3
 844 005b 0E       		.uleb128 0xe
 845 005c 3A       		.uleb128 0x3a
 846 005d 0B       		.uleb128 0xb
 847 005e 3B       		.uleb128 0x3b
 848 005f 05       		.uleb128 0x5
 849 0060 27       		.uleb128 0x27
 850 0061 19       		.uleb128 0x19
 851 0062 11       		.uleb128 0x11
 852 0063 01       		.uleb128 0x1
 853 0064 12       		.uleb128 0x12
 854 0065 06       		.uleb128 0x6
 855 0066 40       		.uleb128 0x40
 856 0067 18       		.uleb128 0x18
 857 0068 9742     		.uleb128 0x2117
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 32


 858 006a 19       		.uleb128 0x19
 859 006b 01       		.uleb128 0x1
 860 006c 13       		.uleb128 0x13
 861 006d 00       		.byte	0
 862 006e 00       		.byte	0
 863 006f 08       		.uleb128 0x8
 864 0070 05       		.uleb128 0x5
 865 0071 00       		.byte	0
 866 0072 03       		.uleb128 0x3
 867 0073 0E       		.uleb128 0xe
 868 0074 3A       		.uleb128 0x3a
 869 0075 0B       		.uleb128 0xb
 870 0076 3B       		.uleb128 0x3b
 871 0077 05       		.uleb128 0x5
 872 0078 49       		.uleb128 0x49
 873 0079 13       		.uleb128 0x13
 874 007a 02       		.uleb128 0x2
 875 007b 18       		.uleb128 0x18
 876 007c 00       		.byte	0
 877 007d 00       		.byte	0
 878 007e 09       		.uleb128 0x9
 879 007f 2E       		.uleb128 0x2e
 880 0080 00       		.byte	0
 881 0081 3F       		.uleb128 0x3f
 882 0082 19       		.uleb128 0x19
 883 0083 03       		.uleb128 0x3
 884 0084 0E       		.uleb128 0xe
 885 0085 3A       		.uleb128 0x3a
 886 0086 0B       		.uleb128 0xb
 887 0087 3B       		.uleb128 0x3b
 888 0088 05       		.uleb128 0x5
 889 0089 27       		.uleb128 0x27
 890 008a 19       		.uleb128 0x19
 891 008b 49       		.uleb128 0x49
 892 008c 13       		.uleb128 0x13
 893 008d 11       		.uleb128 0x11
 894 008e 01       		.uleb128 0x1
 895 008f 12       		.uleb128 0x12
 896 0090 06       		.uleb128 0x6
 897 0091 40       		.uleb128 0x40
 898 0092 18       		.uleb128 0x18
 899 0093 9742     		.uleb128 0x2117
 900 0095 19       		.uleb128 0x19
 901 0096 00       		.byte	0
 902 0097 00       		.byte	0
 903 0098 0A       		.uleb128 0xa
 904 0099 898201   		.uleb128 0x4109
 905 009c 00       		.byte	0
 906 009d 11       		.uleb128 0x11
 907 009e 01       		.uleb128 0x1
 908 009f 31       		.uleb128 0x31
 909 00a0 13       		.uleb128 0x13
 910 00a1 00       		.byte	0
 911 00a2 00       		.byte	0
 912 00a3 0B       		.uleb128 0xb
 913 00a4 2E       		.uleb128 0x2e
 914 00a5 01       		.byte	0x1
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 33


 915 00a6 3F       		.uleb128 0x3f
 916 00a7 19       		.uleb128 0x19
 917 00a8 03       		.uleb128 0x3
 918 00a9 0E       		.uleb128 0xe
 919 00aa 3A       		.uleb128 0x3a
 920 00ab 0B       		.uleb128 0xb
 921 00ac 3B       		.uleb128 0x3b
 922 00ad 0B       		.uleb128 0xb
 923 00ae 27       		.uleb128 0x27
 924 00af 19       		.uleb128 0x19
 925 00b0 11       		.uleb128 0x11
 926 00b1 01       		.uleb128 0x1
 927 00b2 12       		.uleb128 0x12
 928 00b3 06       		.uleb128 0x6
 929 00b4 40       		.uleb128 0x40
 930 00b5 18       		.uleb128 0x18
 931 00b6 9742     		.uleb128 0x2117
 932 00b8 19       		.uleb128 0x19
 933 00b9 01       		.uleb128 0x1
 934 00ba 13       		.uleb128 0x13
 935 00bb 00       		.byte	0
 936 00bc 00       		.byte	0
 937 00bd 0C       		.uleb128 0xc
 938 00be 34       		.uleb128 0x34
 939 00bf 00       		.byte	0
 940 00c0 03       		.uleb128 0x3
 941 00c1 0E       		.uleb128 0xe
 942 00c2 3A       		.uleb128 0x3a
 943 00c3 0B       		.uleb128 0xb
 944 00c4 3B       		.uleb128 0x3b
 945 00c5 0B       		.uleb128 0xb
 946 00c6 49       		.uleb128 0x49
 947 00c7 13       		.uleb128 0x13
 948 00c8 02       		.uleb128 0x2
 949 00c9 17       		.uleb128 0x17
 950 00ca 00       		.byte	0
 951 00cb 00       		.byte	0
 952 00cc 0D       		.uleb128 0xd
 953 00cd 898201   		.uleb128 0x4109
 954 00d0 01       		.byte	0x1
 955 00d1 11       		.uleb128 0x11
 956 00d2 01       		.uleb128 0x1
 957 00d3 31       		.uleb128 0x31
 958 00d4 13       		.uleb128 0x13
 959 00d5 01       		.uleb128 0x1
 960 00d6 13       		.uleb128 0x13
 961 00d7 00       		.byte	0
 962 00d8 00       		.byte	0
 963 00d9 0E       		.uleb128 0xe
 964 00da 8A8201   		.uleb128 0x410a
 965 00dd 00       		.byte	0
 966 00de 02       		.uleb128 0x2
 967 00df 18       		.uleb128 0x18
 968 00e0 9142     		.uleb128 0x2111
 969 00e2 18       		.uleb128 0x18
 970 00e3 00       		.byte	0
 971 00e4 00       		.byte	0
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 34


 972 00e5 0F       		.uleb128 0xf
 973 00e6 34       		.uleb128 0x34
 974 00e7 00       		.byte	0
 975 00e8 03       		.uleb128 0x3
 976 00e9 0E       		.uleb128 0xe
 977 00ea 3A       		.uleb128 0x3a
 978 00eb 0B       		.uleb128 0xb
 979 00ec 3B       		.uleb128 0x3b
 980 00ed 0B       		.uleb128 0xb
 981 00ee 49       		.uleb128 0x49
 982 00ef 13       		.uleb128 0x13
 983 00f0 3F       		.uleb128 0x3f
 984 00f1 19       		.uleb128 0x19
 985 00f2 02       		.uleb128 0x2
 986 00f3 18       		.uleb128 0x18
 987 00f4 00       		.byte	0
 988 00f5 00       		.byte	0
 989 00f6 10       		.uleb128 0x10
 990 00f7 2E       		.uleb128 0x2e
 991 00f8 00       		.byte	0
 992 00f9 3F       		.uleb128 0x3f
 993 00fa 19       		.uleb128 0x19
 994 00fb 3C       		.uleb128 0x3c
 995 00fc 19       		.uleb128 0x19
 996 00fd 6E       		.uleb128 0x6e
 997 00fe 0E       		.uleb128 0xe
 998 00ff 03       		.uleb128 0x3
 999 0100 0E       		.uleb128 0xe
 1000 0101 3A       		.uleb128 0x3a
 1001 0102 0B       		.uleb128 0xb
 1002 0103 3B       		.uleb128 0x3b
 1003 0104 0B       		.uleb128 0xb
 1004 0105 00       		.byte	0
 1005 0106 00       		.byte	0
 1006 0107 00       		.byte	0
 1007              		.section	.debug_loc,"",%progbits
 1008              	.Ldebug_loc0:
 1009              	.LLST0:
 1010 0000 28000000 		.4byte	.LVL10
 1011 0004 33000000 		.4byte	.LVL11-1
 1012 0008 0100     		.2byte	0x1
 1013 000a 50       		.byte	0x50
 1014 000b 00000000 		.4byte	0
 1015 000f 00000000 		.4byte	0
 1016              		.section	.debug_aranges,"",%progbits
 1017 0000 84000000 		.4byte	0x84
 1018 0004 0200     		.2byte	0x2
 1019 0006 00000000 		.4byte	.Ldebug_info0
 1020 000a 04       		.byte	0x4
 1021 000b 00       		.byte	0
 1022 000c 0000     		.2byte	0
 1023 000e 0000     		.2byte	0
 1024 0010 00000000 		.4byte	.LFB2
 1025 0014 02000000 		.4byte	.LFE2-.LFB2
 1026 0018 00000000 		.4byte	.LFB3
 1027 001c 02000000 		.4byte	.LFE3-.LFB3
 1028 0020 00000000 		.4byte	.LFB4
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 35


 1029 0024 0C000000 		.4byte	.LFE4-.LFB4
 1030 0028 00000000 		.4byte	.LFB5
 1031 002c 14000000 		.4byte	.LFE5-.LFB5
 1032 0030 00000000 		.4byte	.LFB7
 1033 0034 0C000000 		.4byte	.LFE7-.LFB7
 1034 0038 00000000 		.4byte	.LFB8
 1035 003c 0C000000 		.4byte	.LFE8-.LFB8
 1036 0040 00000000 		.4byte	.LFB9
 1037 0044 0C000000 		.4byte	.LFE9-.LFB9
 1038 0048 00000000 		.4byte	.LFB10
 1039 004c 0C000000 		.4byte	.LFE10-.LFB10
 1040 0050 00000000 		.4byte	.LFB11
 1041 0054 0C000000 		.4byte	.LFE11-.LFB11
 1042 0058 00000000 		.4byte	.LFB6
 1043 005c 14000000 		.4byte	.LFE6-.LFB6
 1044 0060 00000000 		.4byte	.LFB1
 1045 0064 40000000 		.4byte	.LFE1-.LFB1
 1046 0068 00000000 		.4byte	.LFB0
 1047 006c 18000000 		.4byte	.LFE0-.LFB0
 1048 0070 00000000 		.4byte	.LFB12
 1049 0074 0C000000 		.4byte	.LFE12-.LFB12
 1050 0078 00000000 		.4byte	.LFB13
 1051 007c 0C000000 		.4byte	.LFE13-.LFB13
 1052 0080 00000000 		.4byte	0
 1053 0084 00000000 		.4byte	0
 1054              		.section	.debug_ranges,"",%progbits
 1055              	.Ldebug_ranges0:
 1056 0000 00000000 		.4byte	.LFB2
 1057 0004 02000000 		.4byte	.LFE2
 1058 0008 00000000 		.4byte	.LFB3
 1059 000c 02000000 		.4byte	.LFE3
 1060 0010 00000000 		.4byte	.LFB4
 1061 0014 0C000000 		.4byte	.LFE4
 1062 0018 00000000 		.4byte	.LFB5
 1063 001c 14000000 		.4byte	.LFE5
 1064 0020 00000000 		.4byte	.LFB7
 1065 0024 0C000000 		.4byte	.LFE7
 1066 0028 00000000 		.4byte	.LFB8
 1067 002c 0C000000 		.4byte	.LFE8
 1068 0030 00000000 		.4byte	.LFB9
 1069 0034 0C000000 		.4byte	.LFE9
 1070 0038 00000000 		.4byte	.LFB10
 1071 003c 0C000000 		.4byte	.LFE10
 1072 0040 00000000 		.4byte	.LFB11
 1073 0044 0C000000 		.4byte	.LFE11
 1074 0048 00000000 		.4byte	.LFB6
 1075 004c 14000000 		.4byte	.LFE6
 1076 0050 00000000 		.4byte	.LFB1
 1077 0054 40000000 		.4byte	.LFE1
 1078 0058 00000000 		.4byte	.LFB0
 1079 005c 18000000 		.4byte	.LFE0
 1080 0060 00000000 		.4byte	.LFB12
 1081 0064 0C000000 		.4byte	.LFE12
 1082 0068 00000000 		.4byte	.LFB13
 1083 006c 0C000000 		.4byte	.LFE13
 1084 0070 00000000 		.4byte	0
 1085 0074 00000000 		.4byte	0
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 36


 1086              		.section	.debug_line,"",%progbits
 1087              	.Ldebug_line0:
 1088 0000 55010000 		.section	.debug_str,"MS",%progbits,1
 1088      02004B00 
 1088      00000201 
 1088      FB0E0D00 
 1088      01010101 
 1089              	.LASF32:
 1090 0000 50574D5F 		.ascii	"PWM_ReadCompare\000"
 1090      52656164 
 1090      436F6D70 
 1090      61726500 
 1091              	.LASF29:
 1092 0010 50574D5F 		.ascii	"PWM_ClearFIFO\000"
 1092      436C6561 
 1092      72464946 
 1092      4F00
 1093              	.LASF21:
 1094 001e 70657269 		.ascii	"period\000"
 1094      6F6400
 1095              	.LASF31:
 1096 0025 50574D5F 		.ascii	"PWM_Start\000"
 1096      53746172 
 1096      7400
 1097              	.LASF38:
 1098 002f 433A5C55 		.ascii	"C:\\Users\\bence\\Documents\\PSoC Creator\\CE195352"
 1098      73657273 
 1098      5C62656E 
 1098      63655C44 
 1098      6F63756D 
 1099 005d 5F50536F 		.ascii	"_PSoC_5LP_Blinking_LED\\Lesson 4.cydsn\000"
 1099      435F354C 
 1099      505F426C 
 1099      696E6B69 
 1099      6E675F4C 
 1100              	.LASF3:
 1101 0083 73686F72 		.ascii	"short unsigned int\000"
 1101      7420756E 
 1101      7369676E 
 1101      65642069 
 1101      6E7400
 1102              	.LASF28:
 1103 0096 50574D5F 		.ascii	"PWM_ReadCapture\000"
 1103      52656164 
 1103      43617074 
 1103      75726500 
 1104              	.LASF9:
 1105 00a6 666C6F61 		.ascii	"float\000"
 1105      7400
 1106              	.LASF20:
 1107 00ac 636F756E 		.ascii	"counter\000"
 1107      74657200 
 1108              	.LASF7:
 1109 00b4 6C6F6E67 		.ascii	"long long unsigned int\000"
 1109      206C6F6E 
 1109      6720756E 
 1109      7369676E 
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 37


 1109      65642069 
 1110              	.LASF1:
 1111 00cb 756E7369 		.ascii	"unsigned char\000"
 1111      676E6564 
 1111      20636861 
 1111      7200
 1112              	.LASF36:
 1113 00d9 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1113      43313120 
 1113      352E342E 
 1113      31203230 
 1113      31363036 
 1114 010c 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1114      20726576 
 1114      6973696F 
 1114      6E203233 
 1114      37373135 
 1115 013f 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1115      66756E63 
 1115      74696F6E 
 1115      2D736563 
 1115      74696F6E 
 1116              	.LASF13:
 1117 0167 72656738 		.ascii	"reg8\000"
 1117      00
 1118              	.LASF5:
 1119 016c 6C6F6E67 		.ascii	"long unsigned int\000"
 1119      20756E73 
 1119      69676E65 
 1119      6420696E 
 1119      7400
 1120              	.LASF26:
 1121 017e 50574D5F 		.ascii	"PWM_ReadCounter\000"
 1121      52656164 
 1121      436F756E 
 1121      74657200 
 1122              	.LASF12:
 1123 018e 75696E74 		.ascii	"uint8\000"
 1123      3800
 1124              	.LASF10:
 1125 0194 646F7562 		.ascii	"double\000"
 1125      6C6500
 1126              	.LASF22:
 1127 019b 50574D5F 		.ascii	"PWM_WriteCompare\000"
 1127      57726974 
 1127      65436F6D 
 1127      70617265 
 1127      00
 1128              	.LASF30:
 1129 01ac 50574D5F 		.ascii	"PWM_Init\000"
 1129      496E6974 
 1129      00
 1130              	.LASF40:
 1131 01b5 50574D5F 		.ascii	"PWM_initVar\000"
 1131      696E6974 
 1131      56617200 
 1132              	.LASF34:
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 38


 1133 01c1 4379456E 		.ascii	"CyEnterCriticalSection\000"
 1133      74657243 
 1133      72697469 
 1133      63616C53 
 1133      65637469 
 1134              	.LASF8:
 1135 01d8 756E7369 		.ascii	"unsigned int\000"
 1135      676E6564 
 1135      20696E74 
 1135      00
 1136              	.LASF35:
 1137 01e5 43794578 		.ascii	"CyExitCriticalSection\000"
 1137      69744372 
 1137      69746963 
 1137      616C5365 
 1137      6374696F 
 1138              	.LASF19:
 1139 01fb 50574D5F 		.ascii	"PWM_WritePeriod\000"
 1139      57726974 
 1139      65506572 
 1139      696F6400 
 1140              	.LASF24:
 1141 020b 50574D5F 		.ascii	"PWM_SetInterruptMode\000"
 1141      53657449 
 1141      6E746572 
 1141      72757074 
 1141      4D6F6465 
 1142              	.LASF15:
 1143 0220 73697A65 		.ascii	"sizetype\000"
 1143      74797065 
 1143      00
 1144              	.LASF6:
 1145 0229 6C6F6E67 		.ascii	"long long int\000"
 1145      206C6F6E 
 1145      6720696E 
 1145      7400
 1146              	.LASF25:
 1147 0237 696E7465 		.ascii	"interruptMode\000"
 1147      72727570 
 1147      744D6F64 
 1147      6500
 1148              	.LASF39:
 1149 0245 50574D5F 		.ascii	"PWM_interruptState\000"
 1149      696E7465 
 1149      72727570 
 1149      74537461 
 1149      746500
 1150              	.LASF33:
 1151 0258 50574D5F 		.ascii	"PWM_ReadPeriod\000"
 1151      52656164 
 1151      50657269 
 1151      6F6400
 1152              	.LASF2:
 1153 0267 73686F72 		.ascii	"short int\000"
 1153      7420696E 
 1153      7400
 1154              	.LASF18:
ARM GAS  C:\Users\bence\AppData\Local\Temp\ccLXfUko.s 			page 39


 1155 0271 50574D5F 		.ascii	"PWM_WriteCounter\000"
 1155      57726974 
 1155      65436F75 
 1155      6E746572 
 1155      00
 1156              	.LASF17:
 1157 0282 50574D5F 		.ascii	"PWM_Stop\000"
 1157      53746F70 
 1157      00
 1158              	.LASF4:
 1159 028b 6C6F6E67 		.ascii	"long int\000"
 1159      20696E74 
 1159      00
 1160              	.LASF11:
 1161 0294 63686172 		.ascii	"char\000"
 1161      00
 1162              	.LASF14:
 1163 0299 6C6F6E67 		.ascii	"long double\000"
 1163      20646F75 
 1163      626C6500 
 1164              	.LASF0:
 1165 02a5 7369676E 		.ascii	"signed char\000"
 1165      65642063 
 1165      68617200 
 1166              	.LASF23:
 1167 02b1 636F6D70 		.ascii	"compare\000"
 1167      61726500 
 1168              	.LASF16:
 1169 02b9 50574D5F 		.ascii	"PWM_Enable\000"
 1169      456E6162 
 1169      6C6500
 1170              	.LASF27:
 1171 02c4 50574D5F 		.ascii	"PWM_ReadStatusRegister\000"
 1171      52656164 
 1171      53746174 
 1171      75735265 
 1171      67697374 
 1172              	.LASF37:
 1173 02db 47656E65 		.ascii	"Generated_Source\\PSoC5\\PWM.c\000"
 1173      72617465 
 1173      645F536F 
 1173      75726365 
 1173      5C50536F 
 1174              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
